<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://naeunoh.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://naeunoh.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-09-22T18:15:14+00:00</updated><id>https://naeunoh.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Event Segmentation</title><link href="https://naeunoh.github.io/blog/2022/event-segmentation/" rel="alternate" type="text/html" title="Event Segmentation" /><published>2022-08-10T15:09:00+00:00</published><updated>2022-08-10T15:09:00+00:00</updated><id>https://naeunoh.github.io/blog/2022/event-segmentation</id><content type="html" xml:base="https://naeunoh.github.io/blog/2022/event-segmentation/"><![CDATA[<p>This section shows how to detect event boundaries in fMRI data, which is defined as shifts in spatial patterns of voxel activity, and align events across perception and recall. This is especially important for naturalistic tasks where various events fluctuate across time and it may be hard to clearly identify which events are happening at timepoints, compared to controlled tasks that have predefined structures (e.g. blocks, events).</p>

<p>We’ll show how both <strong>Hidden Markov Model (HMM)</strong> and <strong>Greedy State Boundary Search (GSBS)</strong> can be used to find boundaries, and how the HMM or GSBS+HMM can be used to track reactivation of event patterns during free recall.</p>

<p><a href="https://youtu.be/-iDMphdGVxo">This video</a> by Dr. Chris Baldassano, PhD introduces event segmentation using HMMs.</p>

<p><a href="https://youtu.be/KvwzjRtbJ6U">This video</a> by Dr. Linda Geerligs, PhD will discuss event segmentation using GSBS.</p>

<p>I’ve summarized the content of the videos here.</p>

<h4 id="event-segmentation---hmm"><strong>Event Segmentation - HMM</strong></h4>

<p>We divide naturalistic environments into discrete events, separated by event boundaries. These event boundaries are known to influence the dynamics of perception, immediate recall, and long-term memory.</p>

<p>How do we identify event boundaries? First, human observers can annotate when event boundaries occur (coarse and fine timescale) and check whether brain regions show response at boundaries. The problem is that every brain region may have different event boundaries so it’s hard to generate all the possible hypotheses on where the boundaries might be.</p>

<p>Instead, can we find event boundaries directly from fMRI data? The basic idea is to identify event boundaries as shifts in fMRI activity patterns. For example, if we look at these three voxel time courses, we can identify two moments at which these voxels show shifts in activities, diving up the time courses into three events, each of which has a characteristic spatial pattern of activity.</p>

<p><img src="/assets/img/es/eventsegexample.png" alt="eventseg" width="50%" /></p>

<p>We can see this temporal structure by looking at the angular gyrus during the beginning of the Sherlock dataset. If we take the spatial patterns in the angular gyrus and measure the correlation between all pairs of timepoints, we can obtain a matrix with <strong>blocky structure along the diagonal</strong>. This is the type of structure we’re looking for in event boundaries.</p>

<p><img src="/assets/img/es/hmm-blockpattern.png" alt="hmm-block" width="100%" /></p>

<p><strong>Hidden Markov Model (HMM)</strong> assumes the brain moves through a sequence of latent states which correspond to events (\(s_t\)). We observe a sequence of brain activity (\(b_t\)). Every event has some characteristic pattern of activity (\(m_k\)). All brain activities occurring during that event should be correlated with that characteristic. Thus, given a sequence of brain activity (\(b_t\)), we can infer where event boundaries are (which event every time point belongs to, \(s_t\)) and what these characteristic event patterns are (\(m_k\)). The model alternates between estimating variables \(s_t\) and \(m_k\) until convergence.</p>

<p><img src="/assets/img/es/hmm.png" alt="hmm" width="100%" /></p>

<p>HMM requires choosing the number of boundaries we want to find. One option is to fit the model on N-1 subjects to find boundaries and look at spatial pattern correlations within and across boundaries. We can choose the number of events (\(k\)) that maximizes the <strong>within vs across (all other states) event boundary correlation (WAC)</strong>. Another approach is to look at the <strong>log-likelihood</strong> of the model, which is to look at the model fit. We can train the model on some subjects can measure the model fit on other subjects, determining the number of events for which this model log-likelihood is highest.</p>

<p>After identifying event boundaries of the model in different brain regions, we can <strong>compare those boundaries to those annotated by human observers</strong>. In general, we found that regions like the angular gyrus and the posterior medial cortex have event boundaries that correspond well with human annotated boundaries. When we look at how the optimal number of event boundaries varies across regions, we find a gradient from the sensory cortex to higher-level cortex such that regions like the visual cortex and auditory cortex have a large number of event boundaries, whereas high-level cortex have longer events in the scale of up to a minute in length.</p>

<p>How do we use the event boundaries that we found?</p>
<ol>
  <li>
    <p>Correlation between the number of event boundaries and characteristics of the stimuli (states)</p>
  </li>
  <li>
    <p>Find shared event patterns across datasets with potentially different timings in order to :</p>
    <ul>
      <li>compare different modalities (e.g. movie vs audio of same story shows modality-independent pattern sequences in some brain regions)</li>
      <li>compare perception and later free recall (e.g. reactivation of events during free recall)</li>
      <li>detect temporal shifts between first and rewatch of movies (e.g. after rewatch, event boundaries shift earlier in time up to 12 seconds)</li>
      <li>see if different stories have similar underlying temporal structure (e.g. find brain regions that can classify schematic event sequences of stories-mpfc)</li>
    </ul>
  </li>
</ol>

<p>This HMM approach has also been applied to other neuroimaging modalities such as EEG.</p>

<h4 id="event-segmentation--gsbs"><strong>Event Segmentation – GSBS</strong></h4>

<p>Events organize our experience over time by transforming continuous inputs into units that can be understood and remembered. Events are shared across participants, organized hierarchically. How does the brain segment information over time into neural states?</p>

<p>Testing the event segmentation method introduced by Baldassano et al. (2018), we found some issues : within vs across event boundary correlation leads to over-estimation of the number of states. Also, HMM takes a long time to fit.</p>

<p>Thus, we built a state boundary detection method that: detects state boundaries and the optimal number of states, does not have any assumptions about where state boundaries should be (data-driven), and is fast. The greedy state boundary search (GSBS) using a greedy search approach to find boundaries iteratively.</p>

<p>First, find the initial state boundary from all the timepoints :</p>

<ol>
  <li>Taking each timepoint as a boundary, calculate mean activity pattern per state that is divided by the boundary (i.e. states before and after boundaries)</li>
  <li>For all the potential boundaries (timepoints), calculate how much the original voxel activity time course in a state can be explained by the mean activity pattern in the corresponding state (i.e. correlation)</li>
  <li>average the correlations for all the boundaries (i.e. timepoints) thus getting a single estimate for the fit,</li>
  <li>find the optimal boundary (timepoint) when average correlation is highest (max).</li>
</ol>

<p>Now, the first state boundary is set (that’s why this is greedy). Then, we repeat the process to find the next boundary until we find the number of boundaries we aimed for.</p>

<p><img src="/assets/img/es/gsbs.png" alt="gsbs" width="100%" /></p>

<p>So, how do we determine the number of boundaries? In the time x time correlation matrix, we look at within state correlations and between consecutive state correlations. With the distribution of within state correlations and the distribution between consecutive state correlations, we find the optimal \(k\) number of state boundaries where the distance between the two distributions is maximal (i.e., when within state correlation is highest and between consecutive state correlation is lowest). To measure the distance, we use <strong>T-distance</strong> by running t-tests contrasting the within and between state correlation for each potential number of states and finding the maximum T-distance.</p>

<p><img src="/assets/img/es/gsbs-numofboundaries.png" alt="gsbs-num" width="100%" /></p>

<p>We compared HMM and GSBS methods on simulated data. As states had more varying lengths, GSBS maintained high accuracy but HMM’s accuracy dropped. When looking at the worst performing simulation for HMM, <strong>HMM over-estimates the number of state boundaries as it detects states with approximately the same lengths.</strong> When looking at GSBS with the same low performance has HMM, <strong>GSBS detects all the boundaries with slight delays in some.</strong> Note that the split-merge option in the latest implementation of the HMM-method is partially accounted for the over-estimation issue.</p>

<p>As for determining the number of states, GSBS accurately estimates the number of states whereas HMM’s WAC tends to over-estimate the number of states especially as there are more states. However, GSBS does over-estimate when there is more noise in the data. While LOO CV still gave over-estimation, averaging the data across subjects accurately estimated the number of states (in simulated and real data).</p>

<p>The weakness of GSBS is that it is difficult to match neural states across datasets (because it’s data driven?). Thus, we suggest a method combing GSBS and HMM by estimating the neural states in one dataset and using HMM to identify the same activity patterns in a different dataset.</p>

<p>Examining the duration of states identified by GSBS in the whole brain, we found a brain-wide hierarchy in the timescales of information processing, where sensory regions show short neural states and regions such as the medial prefrontal cortex show long periods of information integration. We also correlated the behaviorally identified event boundaries and neural state boundaries, considering the possible delays of 4-8 seconds and using permutation for significance testing.</p>

<p>Some state transitions are stronger than others. Using the correlation distance between mean neural activity pattern of states as the strength of boundaries, we find more areas that co-occur with subjective boundaries. Thus, stronger event boundaries (strong state transitions) are more likely to be accompanied with the subjective experience of boundaries.</p>]]></content><author><name></name></author><category term="naturalistic-data-analysis" /><category term="neuroimaging" /><category term="psychology" /><category term="analysis-methods" /><summary type="html"><![CDATA[how the brain segments info]]></summary></entry><entry><title type="html">Intersubject RSA Notebook</title><link href="https://naeunoh.github.io/blog/2022/intersubject-rsa-code/" rel="alternate" type="text/html" title="Intersubject RSA Notebook" /><published>2022-08-04T15:10:00+00:00</published><updated>2022-08-04T15:10:00+00:00</updated><id>https://naeunoh.github.io/blog/2022/intersubject-rsa-code</id><content type="html" xml:base="https://naeunoh.github.io/blog/2022/intersubject-rsa-code/"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">glob</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">rankdata</span><span class="p">,</span> <span class="n">ttest_rel</span><span class="p">,</span> <span class="n">ttest_1samp</span>

<span class="kn">from</span> <span class="n">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">matplotlib.lines</span> <span class="k">as</span> <span class="n">mlines</span>
<span class="kn">import</span> <span class="n">matplotlib.transforms</span> <span class="k">as</span> <span class="n">mtransforms</span>

<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>

<span class="kn">import</span> <span class="n">nibabel</span> <span class="k">as</span> <span class="n">nib</span>
<span class="kn">from</span> <span class="n">nilearn.input_data</span> <span class="kn">import</span> <span class="n">NiftiLabelsMasker</span>
<span class="kn">from</span> <span class="n">nilearn.plotting</span> <span class="kn">import</span> <span class="n">plot_glass_brain</span><span class="p">,</span> <span class="n">plot_stat_map</span><span class="p">,</span> <span class="n">view_img</span><span class="p">,</span> <span class="n">view_img_on_surf</span>

<span class="kn">from</span> <span class="n">nltools.data</span> <span class="kn">import</span> <span class="n">Brain_Data</span><span class="p">,</span> <span class="n">Adjacency</span>
<span class="kn">from</span> <span class="n">nltools.mask</span> <span class="kn">import</span> <span class="n">roi_to_brain</span><span class="p">,</span> <span class="n">expand_mask</span>
<span class="kn">from</span> <span class="n">nltools.stats</span> <span class="kn">import</span> <span class="n">fdr</span><span class="p">,</span> <span class="n">threshold</span>

<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">pairwise_distances</span>
<span class="kn">from</span> <span class="n">sklearn.utils</span> <span class="kn">import</span> <span class="n">check_random_state</span>
<span class="kn">from</span> <span class="n">sklearn.manifold</span> <span class="kn">import</span> <span class="n">TSNE</span>

<span class="kn">import</span> <span class="n">datalad.api</span> <span class="k">as</span> <span class="n">dl</span>

<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/naeun-oh/miniconda3/envs/naturalistic37/lib/python3.7/site-packages/nilearn/input_data/__init__.py:27: FutureWarning: The import path 'nilearn.input_data' is deprecated in version 0.9. Importing from 'nilearn.input_data' will be possible at least until release 0.13.0. Please import from 'nilearn.maskers' instead.
  warnings.warn(message, FutureWarning)
It is highly recommended to configure Git before using DataLad. Set both 'user.name' and 'user.email' configuration variables.
</code></pre></div></div>

<h2 id="get-dataset-using-datalad">Get Dataset using datalad</h2>
<p>This tutorial will be using the Paranoia dataset and the extracted ROI timeseries csv files.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># data_dir = '/Volumes/Engram/Data/Paranoia'
</span><span class="n">data_dir</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/Users/naeun-oh/Paranoia/</span><span class="sh">'</span>

<span class="c1"># If dataset hasn't been installed, clone from GIN repository
</span><span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">data_dir</span><span class="p">):</span>
    <span class="n">dl</span><span class="p">.</span><span class="nf">clone</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="sh">'</span><span class="s">https://gin.g-node.org/ljchang/Paranoia</span><span class="sh">'</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="n">datadir</span><span class="p">)</span>

<span class="c1"># Initialize dataset
</span><span class="n">ds</span> <span class="o">=</span> <span class="n">dl</span><span class="p">.</span><span class="nc">Dataset</span><span class="p">(</span><span class="n">data_dir</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get cropped &amp; denoised nifti files for subject's 1's run 1 
</span><span class="n">result</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sub-tb2994*denoise_smooth6mm_task-story_run-1*nii.gz</span><span class="sh">'</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get cropped &amp; denoised node timeseries data for all subjects for all runs
</span><span class="n">result</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*_nodeTimeSeries.csv</span><span class="sh">'</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get participant demographic/behavioral file
</span><span class="n">result</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">participants.tsv</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1;1mget[0m([1;32mok[0m): participants.tsv ([1;35mfile[0m) [from origin...]
</code></pre></div></div>

<h2 id="behavior-data">Behavior Data</h2>
<p>First, let’s discuss what metrics are appropriate for measuring behavioral similarity. We will run simulations and visualizations.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># First, choose number of subjects and simulate behavior chosen from random distribution
</span><span class="n">n_subs</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">behav_raw</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="n">n_subs</span><span class="p">)</span>
<span class="n">behav</span> <span class="o">=</span> <span class="nf">rankdata</span><span class="p">(</span><span class="n">behav_raw</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>

<span class="n">cmap</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="nf">get_cmap</span><span class="p">(</span><span class="sh">'</span><span class="s">RdYlBu_r</span><span class="sh">'</span><span class="p">)</span>
<span class="n">cmap</span><span class="p">.</span><span class="nf">set_bad</span><span class="p">(</span><span class="sh">'</span><span class="s">#C0C0C0</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Define some helper functions
</span><span class="k">def</span> <span class="nf">sort_square_mtx</span><span class="p">(</span><span class="n">mtx</span><span class="p">,</span> <span class="n">vct</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Sorts rows/columns of a matrix according to a separate vector.
    </span><span class="sh">"""</span>
    
    <span class="n">inds</span> <span class="o">=</span> <span class="n">vct</span><span class="p">.</span><span class="nf">argsort</span><span class="p">()</span>
    <span class="n">mtx_sorted</span> <span class="o">=</span> <span class="n">mtx</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
    <span class="n">mtx_sorted</span> <span class="o">=</span> <span class="n">mtx_sorted</span><span class="p">[</span><span class="n">inds</span><span class="p">,</span> <span class="p">:]</span>
    <span class="n">mtx_sorted</span> <span class="o">=</span> <span class="n">mtx_sorted</span><span class="p">[:,</span> <span class="n">inds</span><span class="p">]</span>
    
    <span class="k">return</span> <span class="n">mtx_sorted</span>

<span class="k">def</span> <span class="nf">scale_mtx</span><span class="p">(</span><span class="n">mtx</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Scales a matrix to have values between 0 and 1.
    </span><span class="sh">"""</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">mtx</span><span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">mtx</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">mtx</span><span class="p">)</span><span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">mtx</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/naeun-oh/miniconda3/envs/naturalistic37/lib/python3.7/site-packages/ipykernel_launcher.py:7: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. This has been deprecated since 3.3 and in 3.6, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = mpl.cm.get_cmap("RdYlBu_r").copy()
  import sys
</code></pre></div></div>

<p><strong>Nearest Neighbors model</strong></p>

<p>Let’s see what we are assuming the similarity structure should look like if we use Euclidean distance as our metric. The matrix below is subjects-by-subjects, with subjects ordered according to behavioral score (from low to high).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nn_mtx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">n_subs</span><span class="p">,</span> <span class="n">n_subs</span><span class="p">))</span> <span class="c1"># initialize a similarity matrix
</span><span class="n">noise_factor</span> <span class="o">=</span> <span class="mf">0.1</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_subs</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_subs</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">:</span>
            <span class="n">dist_ij</span> <span class="o">=</span> <span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nf">abs</span><span class="p">(</span><span class="n">behav</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">behav</span><span class="p">[</span><span class="n">j</span><span class="p">])</span><span class="o">/</span><span class="n">n_subs</span><span class="p">)</span> 
            <span class="n">dist_ij</span> <span class="o">+=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">()</span><span class="o">*</span><span class="n">noise_factor</span> <span class="c1"># add some random noise
</span>            <span class="n">nn_mtx</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist_ij</span>
            <span class="n">nn_mtx</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist_ij</span>
            
<span class="n">nn_mtx</span> <span class="o">=</span> <span class="nf">scale_mtx</span><span class="p">(</span><span class="n">nn_mtx</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="nf">fill_diagonal</span><span class="p">(</span><span class="n">nn_mtx</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>    

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="nf">sort_square_mtx</span><span class="p">(</span><span class="n">nn_mtx</span><span class="p">,</span> <span class="n">behav</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">cbar</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">xticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Nearest neighbor</span><span class="se">\n</span><span class="s">(model: Euclidean distance(i,j))</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Nearest neighbor\n(model: Euclidean distance(i,j))')
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_9_1.png" alt="png" width="100%" /></p>

<p>We can see that in the NN case, we see the highest similarity right slong the diagonal. This means we’re assuming that a subject should always look most similar to his or her immediate neighbors, regardless of where they fall on the scale more generally.</p>

<p>Now, compare with the <strong>Anna Karenina</strong> case using the mean.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">annak_mtx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">n_subs</span><span class="p">,</span> <span class="n">n_subs</span><span class="p">))</span>
<span class="n">noise_factor</span> <span class="o">=</span> <span class="mf">0.1</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_subs</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_subs</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">:</span>
            <span class="n">dist_ij</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">([</span><span class="n">behav</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="n">n_subs</span><span class="p">,</span> <span class="n">behav</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="n">n_subs</span><span class="p">])</span> <span class="c1"># calculate distance between i and j as 
</span>            <span class="n">dist_ij</span> <span class="o">+=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">()</span><span class="o">*</span><span class="n">noise_factor</span><span class="p">)</span> <span class="c1"># add some random noise
</span>            <span class="n">annak_mtx</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist_ij</span>
            <span class="n">annak_mtx</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist_ij</span>

<span class="n">annak_mtx</span> <span class="o">=</span> <span class="nf">scale_mtx</span><span class="p">(</span><span class="n">annak_mtx</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="nf">fill_diagonal</span><span class="p">(</span><span class="n">annak_mtx</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>

<span class="c1"># Draw heatmap
</span><span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="nf">sort_square_mtx</span><span class="p">(</span><span class="n">annak_mtx</span><span class="p">,</span> <span class="n">behav</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">cbar</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">xticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">);</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Anna Karenina</span><span class="se">\n</span><span class="s">(model: Euclidean distance(i,j))</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Anna Karenina\n(model: Euclidean distance(i,j))')
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_11_1.png" alt="png" width="100%" /></p>

<p>We can see that similarity increases as we move down and to the right, meaning that we expect that high scorers will look similar to other high scorers, but lower scorers don’t look similar to one another or to high scorers.</p>

<p>Another way to visualize the similarity structure of these matrices is to project them into a two-dimensional embedding using <strong>t-SNE (t-Distributed Stochastic Neighbor Embedding)</strong>. In the righthand panels in the figure below, each dor represents a subject, and subjects are colored according to their behavioral score. In this embedding, similar observations (subjects) appear nearby, while dissimilar observations appear further away. (You can ingore the component axes for interpretation)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list_of_matrices</span> <span class="o">=</span> <span class="p">[</span><span class="n">nn_mtx</span><span class="p">,</span> <span class="n">annak_mtx</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">list_of_matrices</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>

<span class="k">for</span> <span class="n">m</span><span class="p">,</span> <span class="n">mtx</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">list_of_matrices</span><span class="p">):</span>
    <span class="n">ax1</span> <span class="o">=</span> <span class="n">axes</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
    <span class="n">ax2</span> <span class="o">=</span> <span class="n">axes</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
    
    <span class="c1"># Draw heatmap
</span>    <span class="k">if</span> <span class="n">m</span> <span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="n">cbar</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">cbar</span> <span class="o">=</span> <span class="bp">False</span>
        
    <span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="nf">sort_square_mtx</span><span class="p">(</span><span class="n">mtx</span><span class="p">,</span> <span class="n">behav</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax1</span><span class="p">,</span> 
                <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">cbar</span><span class="o">=</span><span class="n">cbar</span><span class="p">,</span> <span class="n">cbar_kws</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Similarity</span><span class="sh">'</span><span class="p">},</span>
                <span class="n">xticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    
    <span class="c1"># Draw tSNE plot
</span>    <span class="c1"># Note that TSNE operates on distance matrices, so because our simlarity matrices are already scaled 
</span>    <span class="c1"># to be between 0 and 1, we can convert easily by doing (1 – similarity matrix)
</span>    <span class="n">isc_embedded</span> <span class="o">=</span> <span class="nc">TSNE</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="sh">"</span><span class="s">precomputed</span><span class="sh">"</span><span class="p">).</span><span class="nf">fit_transform</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">mtx</span><span class="p">)</span> 
    <span class="n">scatter_p</span> <span class="o">=</span> <span class="n">ax2</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">isc_embedded</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">isc_embedded</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">behav</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">([])</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">set_yticks</span><span class="p">([])</span>
    
    <span class="k">if</span> <span class="n">m</span> <span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="n">ax2</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Component 1</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">ax2</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Component 2</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1"># cbar.ax2.set_xticklabels(['Low', 'High'])
</span>        
    <span class="n">ax2</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">square</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">ax2</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">xlim</span> <span class="o">=</span> <span class="n">ax2</span><span class="p">.</span><span class="nf">get_xlim</span><span class="p">(),</span> <span class="n">ylim</span> <span class="o">=</span> <span class="n">ax2</span><span class="p">.</span><span class="nf">get_ylim</span><span class="p">())</span>

<span class="n">cbar</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">(</span><span class="n">scatter_p</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="n">ticks</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="n">cbar</span><span class="p">.</span><span class="n">ax</span><span class="p">.</span><span class="nf">set_yticklabels</span><span class="p">([</span><span class="sh">'</span><span class="s">Low</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">High</span><span class="sh">'</span><span class="p">])</span>
<span class="n">cbar</span><span class="p">.</span><span class="nf">set_label</span><span class="p">(</span><span class="sh">'</span><span class="s">Behavior score</span><span class="sh">'</span><span class="p">,</span> <span class="n">labelpad</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_13_0.png" alt="png" width="100%" /></p>

<p>In this study, the main variable of interest was trait paranoia, which was measured using the Paranoid Thoughts Scale A (Green et al., 2008). This is a self-report questionnaire that asks participants to rate how strongly they agree with statements relating to paranoid ideation over the last month. Some examples are : “I spent time thinking about friends gossiping about me”, “People have been dropping hints for me”, “I was frustrated by people laughing at me.” There are 16 items and each item is rated on a scale from 1 (not at all) to 5 (totally). Therefore, the minimum possible score is 16 and maximum possible score is 80.</p>

<p>This was a sample of all healthy participants (no diagnosis of schizophrenia or other mental illness) so we expect most scores to be on the lower end of the spectrum. Still, trait paranoia varies even among the general population, and this study was designed to look at how normative variation in this trait relates to brain responses to an ambiguous social narrative.</p>

<p>Note that trait measures suffer from a number of issues (e.g. self-report) but are still commonly used. 
IS-RSA can be used with any type of subject level data including behavioral data (Chen et al., 2020) or a computational model (van Barr et al., 2019)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check demographic and behavioral info of participants
</span><span class="n">behav_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">participants.tsv</span><span class="sh">'</span><span class="p">),</span> <span class="n">sep</span><span class="o">=</span><span class="sh">'</span><span class="se">\t</span><span class="sh">'</span><span class="p">)</span>
<span class="n">behav_data</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>participant_id</th>
      <th>age</th>
      <th>sex</th>
      <th>gptsa_score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>sub-tb2994</td>
      <td>27</td>
      <td>M</td>
      <td>22</td>
    </tr>
    <tr>
      <th>1</th>
      <td>sub-tb3132</td>
      <td>28</td>
      <td>F</td>
      <td>16</td>
    </tr>
    <tr>
      <th>2</th>
      <td>sub-tb3240</td>
      <td>25</td>
      <td>M</td>
      <td>18</td>
    </tr>
    <tr>
      <th>3</th>
      <td>sub-tb3279</td>
      <td>20</td>
      <td>M</td>
      <td>20</td>
    </tr>
    <tr>
      <th>4</th>
      <td>sub-tb3512</td>
      <td>34</td>
      <td>M</td>
      <td>18</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Histogram of GPTS-A scores
</span><span class="n">behav</span> <span class="o">=</span> <span class="n">behav_data</span><span class="p">[</span><span class="sh">"</span><span class="s">gptsa_score</span><span class="sh">"</span><span class="p">]</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">displot</span><span class="p">(</span><span class="n">behav</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;seaborn.axisgrid.FacetGrid at 0x7fdb6a651b90&gt;
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_16_1.png" alt="png" width="100%" /></p>

<p>GPTS-A scores follow a pretty skewed distribution in our sample of 22 participants, with most participants scoring fairly low and only a couple scoring higher. This is not necessarily ideal but also not uncommon for a scale like this. For some analyses, we might be worried about these two extreme values driving some or all of our effects, but in RSA it’s common to use <strong>rank-based similarity metrics</strong> (i.e. Spearman correlation instead of Pearson). This means that subjects are not their absolute score, but rather their rank relative to other subjects, thus these two extreme scorers will not be overweighted.</p>

<p>In our case, you can think of our behavior as following a uniform distribution of ranks between 1-22, with some ties where 2 or more subjects had the same raw score.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">behav_rank</span> <span class="o">=</span> <span class="nf">rankdata</span><span class="p">(</span><span class="n">behav</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">histplot</span><span class="p">(</span><span class="n">behav_rank</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>
<span class="c1">#sns.countplot(behav_rank)
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:ylabel='Count'&gt;
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_18_1.png" alt="png" width="100%" /></p>

<h2 id="brain-data">Brain data</h2>

<p>We will use a functional parcellation called the <strong>Shen atlas (Shen et al., 2013)</strong>. Let’s load our parcellation image and initialize a masker object from nilearn that will allow us to average voxels in each individual node.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mask</span> <span class="o">=</span> <span class="nc">Brain_Data</span><span class="p">(</span><span class="sh">'</span><span class="s">https://neurovault.org/media/images/8423/shen_2mm_268_parcellation.nii.gz</span><span class="sh">'</span><span class="p">)</span>
<span class="n">mask</span><span class="p">.</span><span class="nf">plot</span><span class="p">()</span>

<span class="n">masker</span> <span class="o">=</span> <span class="nc">NiftiLabelsMasker</span><span class="p">(</span><span class="n">labels_img</span><span class="o">=</span><span class="n">mask</span><span class="p">.</span><span class="nf">to_nifti</span><span class="p">(),</span> <span class="n">standardize</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_20_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Try the masker on the first subject to see if it's working
</span><span class="n">sub</span> <span class="o">=</span> <span class="sh">'</span><span class="s">sub-tb2994</span><span class="sh">'</span>
<span class="n">fmri_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="n">sub</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">sub</span><span class="si">}</span><span class="s">_denoise_smooth6mm_task-story_run-1_space-MNI152NLin2009cAsym_desc-preproc_bold.nii.gz</span><span class="sh">'</span><span class="p">)</span>

<span class="n">time_series</span> <span class="o">=</span> <span class="n">masker</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">fmri_file</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">time_series</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">time_series</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(526, 268)

&lt;AxesSubplot:&gt;
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_21_2.png" alt="png" width="100%" /></p>

<p>The array has the correct shape : 526 TRs (the length of run 1) x 268 nodes. When we visualize it as a heatmap we can see that values look reasonable : centered around 0 (which we would expect given that the masker function normalized the data by default), and no stripe-y-artifacts that look too concerning.</p>

<p>Next, we’ll create node time series for all subjects for all runs. There are 22 subjects, each with 3 runs, so this will take a while. To speed this up, we have already run the code and shared the extracted csv files in the datalad repository.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Run this if you want to extract data yourself, after the correct data is downloaded
</span>
<span class="n">subj_list</span> <span class="o">=</span> <span class="n">behav_data</span><span class="p">[</span><span class="sh">"</span><span class="s">participant_id</span><span class="sh">"</span><span class="p">]</span>

<span class="k">for</span> <span class="n">subj</span> <span class="ow">in</span> <span class="n">subj_list</span><span class="p">:</span>    
    <span class="k">for</span> <span class="n">run</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]:</span>
        <span class="n">time_series_fname</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="n">subj</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">subj</span><span class="si">}</span><span class="s">_run-</span><span class="si">{</span><span class="n">run</span><span class="si">}</span><span class="s">_nodeTimeSeries.csv</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">time_series_fname</span><span class="p">):</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Node time series file for </span><span class="si">{</span><span class="n">subj</span><span class="si">}</span><span class="s">, run </span><span class="si">{</span><span class="n">run</span><span class="si">}</span><span class="s"> already exists!</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Creating node time series for </span><span class="si">{</span><span class="n">subj</span><span class="si">}</span><span class="s">, run </span><span class="si">{</span><span class="n">run</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">time_series</span> <span class="o">=</span> <span class="n">masker</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="n">subj</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">subj</span><span class="si">}</span><span class="s">_denoise_smooth6mm_task-story_run-</span><span class="si">{</span><span class="n">run</span><span class="si">}</span><span class="s">_space-MNI152NLin2009cAsym_desc-preproc_bold.nii.gz</span><span class="sh">'</span><span class="p">))</span>
            <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">time_series</span><span class="p">).</span><span class="nf">to_csv</span><span class="p">(</span><span class="n">time_series_fname</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load text files containing the nodewise timeseries. 
# As we load them, we stack them into a 3d array that is subjects x TRs x nodes.
</span><span class="n">subj_list</span> <span class="o">=</span> <span class="n">behav_data</span><span class="p">[</span><span class="sh">"</span><span class="s">participant_id</span><span class="sh">"</span><span class="p">]</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">subj</span> <span class="ow">in</span> <span class="n">subj_list</span><span class="p">:</span>
    <span class="n">sub_data</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">run</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">sub_data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="n">subj</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">subj</span><span class="si">}</span><span class="s">_run-</span><span class="si">{</span><span class="n">run</span><span class="si">}</span><span class="s">_nodeTimeSeries.csv</span><span class="sh">'</span><span class="p">)))</span>
    <span class="n">sub_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span><span class="n">sub_data</span><span class="p">)</span>
    <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">sub_data</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(22, 1310, 268)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Save the dimensions :
# 22 subjects x 1310 TRs (number of timepoints in all runs) x 268 nodes
</span>
<span class="n">n_subs</span><span class="p">,</span> <span class="n">n_ts</span><span class="p">,</span> <span class="n">n_nodes</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<h2 id="calculate-brain-similarity">Calculate Brain Similarity</h2>

<p>We will use <strong>intersubject correlation (ISC)</strong> as our measure of brain similarity. ISC is the Pearson correlation of activity in the same spatial location across two or more subjects. Because all subjects heard the same time-locked story, any correlated activity across brains likely reflect processing of the stimulus.</p>

<p>Keep in mind that, in theory, we could calculate brain similarity based on any type of information we can extract from single subjects’ neuroimaging data. For now, we use ISC because it is straightforward to compute, visualize, and interpret.</p>

<p>We’ll calculate one ISC matrix (dims subjects x subjects) for each of out 268 nodes. We use pairwise_distances from scikit learn to comput the distance matrix as it is much faster than np.corrcoef and can comput many different types of distance. When we use correlation, we can easily convert it into similarity by subtracting the values from 1. (1 - distance = similarity). We also store the similarity/distance matrices in an nltools.data.Adjacency instance to make it easier to perform operations on the matrix.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">similarity_matrices</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_nodes</span><span class="p">):</span>
    <span class="n">similarity_matrices</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Adjacency</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nf">pairwise_distances</span><span class="p">(</span><span class="n">data</span><span class="p">[:,</span> <span class="p">:,</span> <span class="n">node</span><span class="p">],</span> <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">correlation</span><span class="sh">'</span><span class="p">),</span> <span class="n">matrix_type</span><span class="o">=</span><span class="sh">'</span><span class="s">similarity</span><span class="sh">'</span><span class="p">))</span>
<span class="n">similarity_matrices</span> <span class="o">=</span> <span class="nc">Adjacency</span><span class="p">(</span><span class="n">similarity_matrices</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Visualize one matrix
</span><span class="n">similarity_matrices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">vmin</span><span class="o">=-</span><span class="p">.</span><span class="mi">25</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="p">.</span><span class="mi">25</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_29_0.png" alt="png" width="100%" /></p>

<p>This looks reasonable: most values are positive (negative distance is not interpretable?), and there is some variance in correlation strength across subject pairs. (Ignore the diagonal as they are perfect correlations to themselves)</p>

<p>Let’s see which nodes show the highest ISC across the whole group. We will compute the mean (or median) of the lower triangle of the matrix using the Adjacency.isc method. We could also get the p-values using the subject-wise bootstrapping method (Chen et al., 2016).</p>

<p>To make the code more concise, we run this using a dictionary comprehension which is like an inplace for loop that creates a Python dictionary.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">isc</span> <span class="o">=</span> <span class="p">{</span><span class="n">node</span><span class="p">:</span><span class="n">similarity_matrices</span><span class="p">[</span><span class="n">node</span><span class="p">].</span><span class="nf">isc</span><span class="p">(</span><span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_bootstraps</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="mi">1</span><span class="p">)[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">]</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_nodes</span><span class="p">)}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nltools.data.brain_data.Brain_Data(data=(268, 238955), Y=0, X=(0, 0), mask=MNI152_T1_2mm_brain_mask.nii.gz)
</code></pre></div></div>

<p>We can combine the ISC values with the Shen k=268 mask to plot the ISC values on the brain. The nltools.mask.roi_to_brain function needs an array of ISC values in an order that corresponds to an image with a binary mask for eabch ROI. We create that using the nltools.mask.expand_mask function. Finally, we plot the results using any of the nilearn plotting functions by casting our Brain_Data instance back into a nibabel instance with the .to_nifti() method.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">isc_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isc</span><span class="p">),</span> <span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">))</span>

<span class="nf">plot_glass_brain</span><span class="p">(</span><span class="n">isc_brain</span><span class="p">.</span><span class="nf">to_nifti</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;nilearn.plotting.displays._projectors.OrthoProjector at 0x7fdb6bc0fad0&gt;
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_34_1.png" alt="png" width="100%" /></p>

<p>It looks like the highest synchrony was in the superior temporal cortex, which makes sense given that these areas are involved in auditory processing and language. Visual regions aren’y particularly synchronized, which also makes sense since this was a purely audio story. But there is also some interesting synchrony in the temporo-parietal junction, anterior temporal lobe, parts of the prefrontal cortex, and posterior cerebellum. This may be a hint that above and beyond receiving the same low-level auditory and linguistic input, participants’ higher-level processing of the stimulus may have been somewhat similar as well.</p>

<p>That was a good sanity check, but what we really want to know is where ISC is higher among pairs of participants that are also more similar in behavior score.</p>

<h2 id="calculate-behavior-similarity">Calculate Behavior Similarity</h2>
<p>There are multiple ways to calculate behavioral similarity, and the metric we choose both implies something about our assumptions for what the similarity structure should look like and affects how we interpret results.</p>

<p>Let’s extract our vector of scores for the behavior we’re interested in.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">behav</span> <span class="o">=</span> <span class="n">behav_data</span><span class="p">[</span><span class="sh">"</span><span class="s">gptsa_score</span><span class="sh">"</span><span class="p">]</span>
<span class="n">behav_rank</span> <span class="o">=</span> <span class="nf">rankdata</span><span class="p">(</span><span class="n">behav</span><span class="p">)</span> <span class="c1"># explicity convert the raw scores to ranks
</span></code></pre></div></div>

<p>We will explore both types of similarity structures presented above (nearest-neighbor and Anna K) to see which is a better fit for our data.</p>

<p>We’ll start by calculating the “nearest-neighbors” behavioral similarity matrix. The metric is Euclidean distance, or the difference between two subject’s ranks. While RSA operates equally well on similarity and distance matrices, it is a bit easier to keep things straigt when both behavioral and ISC matrices are of the same type.
As ISC is inherently a similarity measure (higher score = more similar), and Euclidean distance is inherently a distance measure (higher score = less similar), we’ll convert the Euclidian distances to similarities using the Adjacency.distance_to_similarity method.
This makes it more straighforward when interpreting positive RSA r-values as reflecting a higher representational similarity between brain and behavior.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Nearest Neighbors
</span><span class="n">behav_sim_nn</span> <span class="o">=</span> <span class="nc">Adjacency</span><span class="p">(</span><span class="nf">pairwise_distances</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">behav_rank</span><span class="p">,</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span> <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">euclidean</span><span class="sh">'</span><span class="p">),</span> <span class="n">matrix_type</span><span class="o">=</span><span class="sh">'</span><span class="s">distance</span><span class="sh">'</span><span class="p">)</span>
<span class="n">behav_sim_nn</span> <span class="o">=</span> <span class="n">behav_sim_nn</span><span class="p">.</span><span class="nf">distance_to_similarity</span><span class="p">()</span>

<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="n">behav_sim_nn</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">axes</span><span class="o">=</span><span class="n">ax1</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Behavioral similarity matrix before sorting</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

<span class="c1"># Sort subjects in order of score rank from low to high
</span><span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="nf">sort_square_mtx</span><span class="p">(</span><span class="n">behav_sim_nn</span><span class="p">.</span><span class="nf">squareform</span><span class="p">(),</span> <span class="n">behav</span><span class="p">),</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax2</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Behavioral similarity matrix after sorting</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Behavioral similarity matrix after sorting')
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_39_1.png" alt="png" width="100%" /></p>

<p>After sorting subjects in order of paranoia score rank, the expected diagonal structure, where each subject is more similar to its immediate neighbors, become clearly visible. However, this matrix is only for purposes of visualization. For our IS-RSA analyses, we want to use the original matrix to make sure that subject order matches our ISC matrices.</p>

<p>Now, we’ll construct behavioral similarity matrix reflecting the “Anna Karenina” structure. The metric for this is the mean of two subjects’ ranks, which we’ll normalize by the highest possible rank (the number of subjects).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Anna Karenina
</span><span class="n">behav_sim_annak</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="n">n_subs</span><span class="p">,</span> <span class="n">n_subs</span><span class="p">))</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_subs</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_subs</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">:</span>
            <span class="n">sim_ij</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">([</span><span class="n">behav_rank</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">behav_rank</span><span class="p">[</span><span class="n">j</span><span class="p">]])</span><span class="o">/</span><span class="n">n_subs</span>
            <span class="n">behav_sim_annak</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">sim_ij</span>
            <span class="n">behav_sim_annak</span><span class="p">[</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sim_ij</span>
        <span class="k">elif</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
            <span class="n">behav_sim_annak</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

<span class="c1"># Adjacency class represents adjacency matrices as a vector rather than a 2-d matrix
</span><span class="n">behav_sim_annak</span> <span class="o">=</span> <span class="nc">Adjacency</span><span class="p">(</span><span class="n">behav_sim_annak</span><span class="p">,</span> <span class="n">matrix_type</span><span class="o">=</span><span class="sh">'</span><span class="s">similarity</span><span class="sh">'</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">)</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="n">behav_sim_annak</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">axes</span><span class="o">=</span><span class="n">ax1</span><span class="p">)</span>
<span class="n">ax1</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Behavioral similarity matrix before sorting</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="nf">sort_square_mtx</span><span class="p">(</span><span class="n">behav_sim_annak</span><span class="p">.</span><span class="nf">squareform</span><span class="p">(),</span> <span class="n">behav</span><span class="p">),</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax2</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax2</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Behavioral similarity matrix after sorting</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Behavioral similarity matrix after sorting')
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_41_1.png" alt="png" width="100%" /></p>

<p>Is it what we expected in the sorted similarity matrix?
Similarity increases as you move down and to the right, reflecting the idea that pairs of participants that score higher on trait paranoia should be more similarity than pairs of low-scoring participants.</p>

<p>One convenient feature of operationalizing the similarity matrix in this way is that the same model can detect effects in both directions, based on the sign of the resulting r-value between brain and behavioral similarity matrices. If high scorers are alike and low scorers different, the resulting r-value would be positive; if low scorers are alike and high scorers different, it would be negative. This means we don’t have to run two different models to check for effects in different directions.</p>

<h2 id="compute-is-rsa">Compute IS-RSA</h2>
<p>Now that we have similarity matrices for both brain and behavior data, we can do intersubject RSA.</p>

<p>Rather than finding the central tendency of the pairwise relationships, or the reliability of the signal, by computing the mean for ISC we instead explore that structure of the variations in the pairwise relationships with IS-RSA. This is computed using representational similarity analysis, where we vectorize the lower triangle of the pairwise neural ISC and correlate it with the vectorized lower triangle of the pairwise behavioral ISC. Because we don’t necessarily assume that there will be a linear relationship, particularly as we used different distance metrics (i.e. correlation and euclidean distance), we typically use Spearman 𝜌 ranked correlations.</p>

<p>Let’s loop over nodes and compute the similarity between the brain (similarity_matrices) and each of the competing hypothesis reflected in the NN and AnnaK similarity matrices (behav_sim_nn, behav_sim_annak).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">isrsa_nn</span><span class="p">,</span> <span class="n">isrsa_annak</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">similarity_matrices</span><span class="p">)):</span>
    <span class="n">isrsa_nn</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">similarity_matrices</span><span class="p">[</span><span class="n">node</span><span class="p">].</span><span class="nf">similarity</span><span class="p">(</span><span class="n">behav_sim_nn</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">spearman</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_permute</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="mi">1</span> <span class="p">)[</span><span class="sh">'</span><span class="s">correlation</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">isrsa_annak</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">similarity_matrices</span><span class="p">[</span><span class="n">node</span><span class="p">].</span><span class="nf">similarity</span><span class="p">(</span><span class="n">behav_sim_annak</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">spearman</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_permute</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="mi">1</span> <span class="p">)[</span><span class="sh">'</span><span class="s">correlation</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># Plot correlation values back on the brain
</span><span class="n">isrsa_nn_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isrsa_nn</span><span class="p">),</span> <span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">))</span>
<span class="n">isrsa_annak_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isrsa_annak</span><span class="p">),</span> <span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot an axial montage of each of the ISRSA maps using the same colorscale to make it easier to compare
</span>
<span class="c1"># Find the max absolute magnitude r_val across both sets of results so we can plot using the same colorscale
</span><span class="n">vmax</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">([</span><span class="nf">list</span><span class="p">(</span><span class="n">isrsa_nn</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span> <span class="nf">list</span><span class="p">(</span><span class="n">isrsa_annak</span><span class="p">.</span><span class="nf">values</span><span class="p">())]))</span>

<span class="nf">plot_stat_map</span><span class="p">(</span><span class="n">isrsa_nn_brain</span><span class="p">.</span><span class="nf">to_nifti</span><span class="p">(),</span> <span class="n">display_mode</span><span class="o">=</span><span class="sh">'</span><span class="s">z</span><span class="sh">'</span><span class="p">,</span> <span class="n">cut_coords</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="n">vmax</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="sh">"</span><span class="s">NN</span><span class="sh">"</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">plot_stat_map</span><span class="p">(</span><span class="n">isrsa_annak_brain</span><span class="p">.</span><span class="nf">to_nifti</span><span class="p">(),</span> <span class="n">display_mode</span><span class="o">=</span><span class="sh">'</span><span class="s">z</span><span class="sh">'</span><span class="p">,</span> <span class="n">cut_coords</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="n">vmax</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="sh">"</span><span class="s">AnnaK</span><span class="sh">"</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Users/naeun-oh/miniconda3/envs/naturalistic37/lib/python3.7/site-packages/nilearn/plotting/img_plotting.py:300: FutureWarning: Default resolution of the MNI template will change from 2mm to 1mm in version 0.10.0
  anat_img = load_mni152_template()

&lt;nilearn.plotting.displays._slicers.ZSlicer at 0x7fdaa0162e10&gt;
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_46_2.png" alt="png" width="100%" /></p>

<p><img src="/assets/img/IS-RSA/IS-RSA_46_3.png" alt="png" width="100%" /></p>

<p>Some of the nodes with the highest IS-RSA values for the nearest neighbor model are in the angular gyrus/temporo-parietal junction (typical “default mode” region), and the lateral prefrontal cortex. The Anna Karenina model also has high IS-RSA values in the angular gyrus, but also in the PCC and dACC.</p>

<h2 id="comparing-different-models">Comparing different models</h2>
<p>We can look at the distribution of RSA r-values across all nodes to see if there is generally some level of representational similarity between brain and behavior. We can test if this distribution is significantly shifted from zero using a one-sample t-test. Note that this doesn’t tell us which, if any, individual nodes show significant representational similarity, but it can tell us if there is significant representational similarity at the whole-brain level.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">ncols</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">histplot</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">isrsa_nn</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span> <span class="n">ax</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">axvline</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">);</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Correlation</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Nearest Neighbor Node IS-RSA</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">t</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="nf">ttest_1samp</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">isrsa_nn</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">annotate</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">t=</span><span class="si">{</span><span class="n">t</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">, p = </span><span class="si">{</span><span class="n">p</span><span class="si">:</span><span class="p">.</span><span class="mi">03</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span> <span class="n">xy</span> <span class="o">=</span> <span class="p">(.</span><span class="mi">2</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">histplot</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">isrsa_annak</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span> <span class="n">ax</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">axvline</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">);</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Correlation</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Anna Karenina Node IS-RSA</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">t</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="nf">ttest_1samp</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">isrsa_annak</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">annotate</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">t=</span><span class="si">{</span><span class="n">t</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">, p = </span><span class="si">{</span><span class="n">p</span><span class="si">:</span><span class="p">.</span><span class="mi">03</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span> <span class="n">xy</span> <span class="o">=</span> <span class="p">(.</span><span class="mi">2</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.2, 40, 't=13.75, p = 0.000')
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_49_1.png" alt="png" width="100%" /></p>

<p>We see that the values are <strong>generally shifted positive</strong> (the expected direction), meaning that there is more representational similarity between brain and behavior than we would expect by chance.</p>

<p>We can also test if the mean of the two distributions are significantly different from each other using a <strong>paired samples t-test</strong>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="nf">histplot</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">isrsa_nn</span><span class="p">.</span><span class="nf">values</span><span class="p">()))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">displot</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">isrsa_annak</span><span class="p">.</span><span class="nf">values</span><span class="p">()))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Nearest Neighbor</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Anna Karenina</span><span class="sh">'</span><span class="p">],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Overall distribution of ISRSA Values across all nodes</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">gca</span><span class="p">().</span><span class="nf">axvline</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">);</span>

<span class="n">t</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="nf">ttest_rel</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">isrsa_nn</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span> <span class="nf">list</span><span class="p">(</span><span class="n">isrsa_annak</span><span class="p">.</span><span class="nf">values</span><span class="p">()))</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">t=</span><span class="si">{</span><span class="n">t</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">, p = </span><span class="si">{</span><span class="n">p</span><span class="si">:</span><span class="p">.</span><span class="mi">03</span><span class="n">f</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t=-7.43, p = 0.000
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_51_1.png" alt="png" width="100%" /></p>

<p><img src="/assets/img/IS-RSA/IS-RSA_51_2.png" alt="png" width="100%" /></p>

<p>Another way to visually compare results from the two models is with a <strong>scatterplot</strong>. Each dot is a node, and we also plot the identity line (where y=x, not the regression line). If the NN and AnnaK models gave identical results, all the dots would fall on this diagonal line. If some dots are above and some dots are below, it means that different nodes are best fit by different models (some by NN, others by AnnaK). If most of the dots are above (rather than below) the line, it means that overall the AnnaK model is better of the majority of nodes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">set_aspect_ratio</span><span class="p">(</span><span class="n">ax</span><span class="p">):</span>
    
    <span class="sh">"""</span><span class="s">
    helper function to make square axes with equal x and y ranges
    </span><span class="sh">"""</span>
    
    <span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">get_xlim</span><span class="p">()</span>
    <span class="n">ymin</span><span class="p">,</span> <span class="n">ymax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">get_ylim</span><span class="p">()</span>
    <span class="n">both_min</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">([</span><span class="n">xmin</span><span class="p">,</span> <span class="n">ymin</span><span class="p">])</span>
    <span class="n">both_max</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">([</span><span class="n">xmax</span><span class="p">,</span> <span class="n">ymax</span><span class="p">])</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">set_xlim</span><span class="p">((</span><span class="n">both_min</span><span class="p">,</span> <span class="n">both_max</span><span class="p">))</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">((</span><span class="n">both_min</span><span class="p">,</span> <span class="n">both_max</span><span class="p">))</span>
    <span class="n">x0</span><span class="p">,</span><span class="n">x1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">get_xlim</span><span class="p">()</span>
    <span class="n">y0</span><span class="p">,</span><span class="n">y1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">get_ylim</span><span class="p">()</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">set_aspect</span><span class="p">(</span><span class="nf">abs</span><span class="p">(</span><span class="n">x1</span><span class="o">-</span><span class="n">x0</span><span class="p">)</span><span class="o">/</span><span class="nf">abs</span><span class="p">(</span><span class="n">y1</span><span class="o">-</span><span class="n">y0</span><span class="p">))</span>
    
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">isrsa_nn</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span> <span class="nf">list</span><span class="p">(</span><span class="n">isrsa_annak</span><span class="p">.</span><span class="nf">values</span><span class="p">()),</span> <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">6</span><span class="p">)</span>

<span class="n">line</span> <span class="o">=</span> <span class="n">mlines</span><span class="p">.</span><span class="nc">Line2D</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">gray</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">)</span>
<span class="n">transform</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">transAxes</span>
<span class="n">line</span><span class="p">.</span><span class="nf">set_transform</span><span class="p">(</span><span class="n">transform</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">add_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
<span class="nf">set_aspect_ratio</span><span class="p">(</span><span class="n">ax</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">NN r value</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">AnnaK r value</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0, 0.5, 'AnnaK r value')
</code></pre></div></div>

<p><img src="/assets/img/IS-RSA/IS-RSA_53_1.png" alt="png" width="100%" /></p>

<p>In our case, some dots are above and below the line with a bit more above the line than below. Thus, we can say that different nodes are fit by the two models with the AnnaK model fitting more nodes than the NN model.</p>

<h2 id="hypothesis-tests">Hypothesis Tests</h2>
<p>It’s easy enough to calculate a correlation coefficient between the upper triangles of two similarity matrices, but we need to be careful when assessing the statistical significance of this correlation. Parametric p-values won’t work here, since the values in each matrix are not independent: each value is associated with two subjects, meaning that any two values that share a row or column are not independent. In other words, the value for (i,j) is not independent from the value for (i,k), since they share subject i.</p>

<p>This means that we need to calculate significance non-parametrically, by randomly shuffling one of the matrices in a way that respects this complicated dependence structure (<strong>permutation</strong>). We can do this by simply making sure we permute rows and columns at the same time. One easy way to think about this is, in the case of the behavioral similarity matrix, it’s as if we shuffled behavior scores across subjects and recalculated the behavioral similarity matrix. (Or, in the case of the brain similarity matrix, it’s as if we shuffled node timeseries across subjects and recalculated the ISC matrix.) Then we correlate this shuffled matrix with the second matrix, and we do this a large number of times to build up a distribution for the correlation we might expect by chance.</p>

<p>We will use the Adjacency.similarity method again, but now we will specify the number of permutation with n_permute=5000 and the number of CPUs to use with n_jobs. If n_job=-1, the function will parallelize the permutations using all available CPUs.</p>

<p>Note: running these permutation tests over all nodes for both models will take approximately 30 min as it requires running over 2.6 million correlations (2 models X 268 nodes X 5000 permutations).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">isrsa_nn_r</span><span class="p">,</span> <span class="n">isrsa_nn_p</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">{}</span>
<span class="n">isrsa_annak_r</span><span class="p">,</span> <span class="n">isrsa_annak_p</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">similarity_matrices</span><span class="p">)):</span>
    <span class="k">if</span> <span class="n">node</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Doing node {} of {}...</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">node</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">similarity_matrices</span><span class="p">)),</span> <span class="n">end</span> <span class="o">=</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{}..</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">node</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="n">end</span> <span class="o">=</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="n">stats_nn</span> <span class="o">=</span> <span class="n">similarity_matrices</span><span class="p">[</span><span class="n">node</span><span class="p">].</span><span class="nf">similarity</span><span class="p">(</span><span class="n">behav_sim_nn</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">spearman</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_permute</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span> <span class="p">)</span>
    <span class="n">isrsa_nn_r</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">stats_nn</span><span class="p">[</span><span class="sh">'</span><span class="s">correlation</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">isrsa_nn_p</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">stats_nn</span><span class="p">[</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="n">stats_annak</span> <span class="o">=</span> <span class="n">similarity_matrices</span><span class="p">[</span><span class="n">node</span><span class="p">].</span><span class="nf">similarity</span><span class="p">(</span><span class="n">behav_sim_annak</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">spearman</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_permute</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span> <span class="p">)</span>
    <span class="n">isrsa_annak_r</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">stats_annak</span><span class="p">[</span><span class="sh">'</span><span class="s">correlation</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">isrsa_annak_p</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="n">stats_annak</span><span class="p">[</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">]</span>

<span class="n">isrsa_nn_r_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isrsa_nn_r</span><span class="p">),</span> <span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">))</span>
<span class="n">isrsa_nn_p_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isrsa_nn_p</span><span class="p">),</span> <span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">))</span>

<span class="n">isrsa_annak_r_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isrsa_annak_r</span><span class="p">),</span> <span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">))</span>
<span class="n">isrsa_annak_p_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isrsa_annak_p</span><span class="p">),</span> <span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">))</span>
</code></pre></div></div>

<p>Feel free to explore the IS-RSA values with the interactive plots. The values should be identical to the analyses run above. However, we now we have p-values to evaluate the likelihood we would observe these values by chance.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Nearest-Neighbor Model</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">view_img</span><span class="p">(</span><span class="n">isrsa_nn_r_brain</span><span class="p">.</span><span class="nf">to_nifti</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Nearest-Neighbor Model

/Users/naeun-oh/miniconda3/envs/naturalistic37/lib/python3.7/site-packages/numpy/core/fromnumeric.py:755: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.
  a.partition(kth, axis=axis, kind=kind, order=order)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Anna Karenina Model</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">view_img</span><span class="p">(</span><span class="n">isrsa_annak_r_brain</span><span class="p">.</span><span class="nf">to_nifti</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Anna Karenina Model

/Users/naeun-oh/miniconda3/envs/naturalistic37/lib/python3.7/site-packages/numpy/core/fromnumeric.py:755: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.
  a.partition(kth, axis=axis, kind=kind, order=order)
</code></pre></div></div>

<p><strong>Correcting for multiple comparisons</strong></p>

<p>If we want to make inferences about the significance of representational similarity at individual nodes, we need to correct for multiple comparisons (since for each model we’ve run 268 tests – one for each node). We could use Bonferroni correction, where we divide our alpha threshold (typically 0.05) by the number of tests we’ve run (268) to get a corrected alpha threshold (in this case 0.05/268 = 0.00019), but this is probably too conservative, resulting in many false negatives. An alternative is to use the false discovery rate method (FDR) to give us better power (Benjamini &amp; Hochberg, 1995).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># NN model
</span><span class="n">fdr_thr</span> <span class="o">=</span> <span class="nf">fdr</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isrsa_nn_p</span><span class="p">).</span><span class="n">values</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">FDR Threshold: </span><span class="si">{</span><span class="n">fdr_thr</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

<span class="nf">view_img</span><span class="p">(</span><span class="nf">threshold</span><span class="p">(</span><span class="n">isrsa_nn_r_brain</span><span class="p">,</span> <span class="n">isrsa_nn_p_brain</span><span class="p">,</span> <span class="n">thr</span><span class="o">=</span><span class="n">fdr_thr</span><span class="p">).</span><span class="nf">to_nifti</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FDR Threshold: 0.023395320935812838
</code></pre></div></div>

<p>With the fdr level q=0.05, no regions survive correction. If we set the fdr level q=0.8, the FDR threshold is fairly low p &lt; 0.0234. Then, there are several nodes in the hippocampus, PCC, parietal cortex, cerebellum, and right lateral PFC that survive this threshold.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># AnnaK model
</span><span class="n">fdr_thr</span> <span class="o">=</span> <span class="nf">fdr</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isrsa_annak_p</span><span class="p">).</span><span class="n">values</span><span class="p">,</span> <span class="n">q</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">FDR Threshold: </span><span class="si">{</span><span class="n">fdr_thr</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

<span class="nf">view_img</span><span class="p">(</span><span class="nf">threshold</span><span class="p">(</span><span class="n">isrsa_annak_r_brain</span><span class="p">,</span> <span class="n">isrsa_annak_p_brain</span><span class="p">,</span> <span class="n">thr</span><span class="o">=</span><span class="n">fdr_thr</span><span class="p">).</span><span class="nf">to_nifti</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FDR Threshold: -1
</code></pre></div></div>

<p>It seems that no regions survive correction. And if we set the fdr level high (q=0.81), the threshold is too high to interpret significance (p&lt;0.2).</p>

<p>Why might this happen? It’s likely due to a lack of power. With only 22 subjects, it’s difficult to detect brain-behavior relationships.</p>

<p>The original paper (Finn et al., 2018) took a voxelwise approach, which greatly increased computational complexity and the number of tests, but it also allowed them to take advantage of cluster-based correction, which is another way to control the family-wise error rate that leverages the spatial structure of the data (based on the assumption that if manu contiguous voxels are significant, it’s unlikely to be due to chance).</p>

<p>In our case, using a parcellation approach lowered computational costs, but we may lose sensitivity and we are not able to use cluster correction or other spatial methods.</p>]]></content><author><name></name></author><category term="naturalistic-data-analysis" /><category term="neuroimaging" /><category term="psychology" /><category term="analysis-methods" /><summary type="html"><![CDATA[tutorial for intersubject rsa]]></summary></entry><entry><title type="html">Intersubject RSA</title><link href="https://naeunoh.github.io/blog/2022/intersubject-rsa/" rel="alternate" type="text/html" title="Intersubject RSA" /><published>2022-07-20T15:09:00+00:00</published><updated>2022-07-20T15:09:00+00:00</updated><id>https://naeunoh.github.io/blog/2022/intersubject-rsa</id><content type="html" xml:base="https://naeunoh.github.io/blog/2022/intersubject-rsa/"><![CDATA[<p>Whereas ISC and related approached were traditionally developed to detect responses shared at the group level, we know that brain activity during naturalistic stimuli also shows interesting individual differences. If ISC by definition operated at the level of subject pairs, how can we use this to measure behaviors at the level of single subjects with individual differences?
If we take the subjects-by-subjects ISC matrix to be a brain similarity matrix, we can <strong>construct a behavioral similarity matrix and use RSA to find brain regions where subjects who are more similar in behavior are also more similar in their neural response</strong>.</p>

<p><img src="/assets/img/IS-RSA/Fig1_multilayer_figure_R1.jpg" alt="isrsa" width="100%" /></p>

<p><strong>Fig. 1.</strong> Schematic of inter-subject representational similarity analysis. (Finn et al., 2020). Each subject (bottom layer) is associated with a behavioral score (middle layer) and a pattern of brain activity (top layer, e.g., a time series from a given brain region during naturalistic stimulation). The middle and upper layers depict weighted graphs obtained using the similarity matrices as adjacency matrices, where thicker lines indicate increased similarity between nodes (subjects). In IS-RSA, we construct pairwise (i.e, subject-by-subject) similarity matrices for the behavioral data and the brain data, then compare these matrices using a Mantel test. Thus, we can leverage inter-subject analysis methods such as ISC to detect shared structure between brain data and behavioral data. This figure is a modified version of Fig. 1 in Glerean et al. (2016).</p>

<p><a href="https://youtu.be/vDrMuFJfsv8">This video by Emily Finn, PhD</a> shows how inter-subject approaches can be more sensitive to phenotypic differences between individuals than other approached for analyzing naturalistic data.</p>

<p><a href="https://youtu.be/roG9gkTOx_U">This video by Carolyn Parkinson, PhD</a> discusses practical considerations for analyzing naturalistic data.</p>

<h2 id="measuring-similarity">Measuring similarity</h2>

<p>How do we measure behavioral similarity? This is a basic concept of RSA in general. In choosing a distance metric, particularly when our behavior is one-dimensional (e.g. age, trait score, accuracy on a cognitive task), we bake in some fundamental assumptions about the structure of the brain-behavior representational similarity that affect the ultimate results and how we interpret them. Also, there is some evidence that computing similarity using responses to individual questions as an embedding space can create a richer representational space than using univariate summary scores (Chen et al., 2020). To get a feel for some potential structures, imagine arranging the rows and columns of the ISC matrix such that subjects are ordered by their behavioral score. What would we expect the resulting matrix to look like?</p>

<p>If we use Euclidean distance or another relative distance metric, we implicitly assume that subjects with closer scores should be more similar to one another, regardless of where they fall on the scale. In other words, for a behavior that is measured on a scale from 0 to 100, a pair of subjects scoring 0 and 1 should be just as similar as a pair of subjects scoring 99 and 100 (since in both scaes the Euclidean distance is 1). We call this the Nearest Neighbors (NN) model, which assumes that a subject should always look most similar to his or her immediate neighbors, regardless of their absolute position on the scale.</p>

<p><strong>Thoughts:</strong> this eminds me of cognitive tests, does the metric assume??</p>

<p>The NN model may be appropriate for certain behaviors (e.g. age, accuracy on attention or vision task..), but we could imagine an equally if not more plausible scenario : that similarity between subjects increases or decreases as one moves up or down the scale, in an absolute rather than relative sense. For example, perhaps high-scoring subjects are more similar to other high scorers, while low-scoring subjects are less similar both to high scorers and other low scorers. In other words, brain responses cluster together for subjects at one end of the behavioral spectrum, white variability increases as one moves toward the opposite end of the spectrum. We call this the Anna Karenina (AnnaK) model, after the famous opening line of Leo Tolstoy’s novel, which reads “All happy families are alike; each unhappy family is unhappy in its own way” (or, in this context, “all high [low] scorers are alike; each low [high] scorer is different in his or her own way”). In this case, Euclidean distance would not be the most appropriate choice. Instead, we would want to model similarity using a metric that reflects absolute position on the scale, such as the mean \((i+j)/2\), minimum \(min(i,j)\), or the product of the mean and minimum.</p>

<h2 id="things-to-consider-when-analyzing-brain-data">Things to consider when analyzing brain data</h2>

<p>With fMRI data, we have a choice to whether we’d like to work in the original resolution of the data (voxels) or to summarize across space in some way.</p>

<p>We could calculate similarity across the <strong>whole brain</strong> at once, but there are probably some regions where the representational similarity with behavior is stronger than in other regions, and we’d like to be able to visualize and say something about which regions are contributing most to our effect.</p>

<p>We could calculate similarity at <strong>each individual voxel</strong> separately. This has the advantage of maximizing spatial specificity, but it’s also expensive in terms of time and computation, and we know the BOLD response tends to be smoother than single voxels.</p>

<p>Another option would be to take a <strong>searchlight</strong> approach, where we calculate similarity with a searchlight (relatively small sphere or cube of voxels centered around a voxel). This preserves some degree of spatial specificity while boosting signal relative to single voxels (which can be noisy) and recognizing the inherent smoothness of the local BOLD response. But it still requires us to loop through every voxel which takes a lot of time and memory.
Furthermore, both single-voxel and searchlight approaches also lead to larger penalties when it comes time to correct for multiple comparisons, since we’ve effectively done as many tests as there are voxels, and we need to stringently control for false positives.</p>

<p>A happy medium is to summarize voxelwise data into <strong>nodes or parcels</strong>. We can use <strong>predefined ROIs</strong> to group voxels into contiguous regions. At each TR, we average signal in all the voxels in a node to get one representative timecourse for that node. This way, we cut down on computational complexity by several orders of magnitude (~70,000 brain voxels in a typical \(3mm^2\) whole-brain acquisition vs ~100-300 nodes in most parcellations).</p>

<p>We will use a functional parcellation called the Shen atlas (Shen et al., 2013), which has 268 nodes. I personally like this parcellation because it covers the whole brain including the subcortex and cerebellum, whereas other parcellations only over cortex. Also, in general, parcellations in the 200-300 node range provide a good balance of spatial specificity without having nodes so small that they amplify registration errors and partial voluming effects from slight misalignments across subjects. In general, there is no single “true” parcellation : <strong>it’s more of a data-reduction step and it’s never a bad idea to make sure your results are robust to the choice of parcellation.</strong></p>

<p>Note that while using parcellations is convenient for computational purposes, this approach may obscure finer-grained individual differences that emerge when considering smaller spatial scales. Feilong et al. (2018) used an IS-RSA approach to quantify the reliability of individual differences in cortical functional architecture across alignment methods, spatial scales, and functional indices, and found that individuals reliably differ in fine-scale cortical functional architecture when data were first hyperaligned. Furthermore, these individual differences in fine-grained cortical architecture provide strong predictions of general intelligence. Thus, combing functional alignment with IS-RSA approaches is a promising avenue for future work to strengthen our understanding of brain-behavior relationships.</p>]]></content><author><name></name></author><category term="naturalistic-data-analysis" /><category term="neuroimaging" /><category term="psychology" /><category term="analysis-methods" /><summary type="html"><![CDATA[individual variations in brain activity]]></summary></entry><entry><title type="html">Intersubject Correlation Notebook</title><link href="https://naeunoh.github.io/blog/2022/intersubject-correlation-code/" rel="alternate" type="text/html" title="Intersubject Correlation Notebook" /><published>2022-07-17T15:10:00+00:00</published><updated>2022-07-17T15:10:00+00:00</updated><id>https://naeunoh.github.io/blog/2022/intersubject-correlation-code</id><content type="html" xml:base="https://naeunoh.github.io/blog/2022/intersubject-correlation-code/"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">glob</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">numpy.fft</span> <span class="kn">import</span> <span class="n">fft</span><span class="p">,</span> <span class="n">ifft</span><span class="p">,</span> <span class="n">fftfreq</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">matplotlib</span> <span class="kn">import</span> <span class="n">gridspec</span>
<span class="kn">from</span> <span class="n">matplotlib.animation</span> <span class="kn">import</span> <span class="n">FuncAnimation</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">from</span> <span class="n">nltools.data</span> <span class="kn">import</span> <span class="n">Brain_Data</span><span class="p">,</span> <span class="n">Adjacency</span>
<span class="kn">from</span> <span class="n">nltools.mask</span> <span class="kn">import</span> <span class="n">expand_mask</span><span class="p">,</span> <span class="n">roi_to_brain</span>
<span class="kn">from</span> <span class="n">nltools.stats</span> <span class="kn">import</span> <span class="n">isc</span><span class="p">,</span> <span class="n">isfc</span><span class="p">,</span> <span class="n">isps</span><span class="p">,</span> <span class="n">fdr</span><span class="p">,</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">phase_randomize</span><span class="p">,</span> <span class="n">circle_shift</span><span class="p">,</span> <span class="n">_butter_bandpass_filter</span><span class="p">,</span> <span class="n">_phase_mean_angle</span><span class="p">,</span> <span class="n">_phase_vector_length</span>
<span class="kn">from</span> <span class="n">nilearn.plotting</span> <span class="kn">import</span> <span class="n">view_img_on_surf</span><span class="p">,</span> <span class="n">view_img</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">pairwise_distances</span>
<span class="kn">from</span> <span class="n">sklearn.utils</span> <span class="kn">import</span> <span class="n">check_random_state</span>
<span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">ttest_1samp</span>
<span class="kn">from</span> <span class="n">scipy.signal</span> <span class="kn">import</span> <span class="n">hilbert</span>
<span class="kn">import</span> <span class="n">networkx</span> <span class="k">as</span> <span class="n">nx</span>
<span class="kn">from</span> <span class="n">IPython.display</span> <span class="kn">import</span> <span class="n">HTML</span>
<span class="kn">import</span> <span class="n">warnings</span>
<span class="kn">import</span> <span class="n">brainiak.isc</span>

<span class="c1"># import nest_asyncio
# nest_asyncio.apply()
</span><span class="kn">import</span> <span class="n">datalad.api</span> <span class="k">as</span> <span class="n">dl</span>

<span class="n">warnings</span><span class="p">.</span><span class="nf">simplefilter</span><span class="p">(</span><span class="sh">'</span><span class="s">ignore</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="get-dataset-using-datalad">Get Dataset using datalad</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_dir</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/Users/naeun-oh/Sherlock</span><span class="sh">'</span>

<span class="c1"># If dataset hasn't been installed, clone from GIN repository
</span><span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">data_dir</span><span class="p">):</span>
    <span class="n">dl</span><span class="p">.</span><span class="nf">clone</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="sh">'</span><span class="s">https://gin.g-node.org/ljchang/Sherlock</span><span class="sh">'</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="n">data_dir</span><span class="p">)</span>

<span class="c1"># Initialize dataset
</span><span class="n">ds</span> <span class="o">=</span> <span class="n">dl</span><span class="p">.</span><span class="nc">Dataset</span><span class="p">(</span><span class="n">data_dir</span><span class="p">)</span>

<span class="n">ds</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">annex</span><span class="o">=</span><span class="sh">'</span><span class="s">all</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="intersubject-correlation">Intersubject Correlation</h2>
<p>We will compute ISC on average activity within 50 ROIs, which is already extracted in csv files for all participants.
We will use the pairwise method to compute ISC for each ROI.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get Cropped &amp; Denoised CSV Files
</span><span class="n">result</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="s">*Average_ROI*csv</span><span class="sh">'</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ROI mask : 
# download the k=50 whole brain meta-analytic parcellation of the neurosynth database (de la Vega, 2016) from neurovault
</span><span class="n">mask</span> <span class="o">=</span> <span class="nc">Brain_Data</span><span class="p">(</span><span class="sh">'</span><span class="s">http://neurovault.org/media/images/2099/Neurosynth%20Parcellation_0.nii.gz</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Each ROI is indicated with a unique integer
# The whole mask is expanded into 50 separate binary masks with expand_mask()
</span><span class="n">mask_x</span> <span class="o">=</span> <span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>

<span class="n">mask</span><span class="p">.</span><span class="nf">plot</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_5_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># You can practice extracting average ROI data but it's been done for you already
</span><span class="k">for</span> <span class="n">scan</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">'</span><span class="s">Part1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Part2</span><span class="sh">'</span><span class="p">]:</span>
    <span class="n">file_list</span> <span class="o">=</span> <span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="s">*crop*</span><span class="si">{</span><span class="n">scan</span><span class="si">}</span><span class="s">*hdf5</span><span class="sh">'</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">file_list</span><span class="p">:</span>
        <span class="n">sub</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">f</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nc">Brain_Data</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="n">roi</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">extract_roi</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
        <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">roi</span><span class="p">.</span><span class="n">T</span><span class="p">).</span><span class="nf">to_csv</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">f</span><span class="p">),</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">sub</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">scan</span><span class="si">}</span><span class="s">_Average_ROI_n50.csv</span><span class="sh">"</span> <span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load the csv files for each participant and save into dict
</span><span class="n">sub_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*Part1*csv</span><span class="sh">'</span><span class="p">))]</span>
<span class="n">sub_list</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>

<span class="n">sub_timeseries</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">sub_list</span><span class="p">:</span>
    <span class="n">part1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="n">sub</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">sub</span><span class="si">}</span><span class="s">_Part1_Average_ROI_n50.csv</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">part2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="n">sub</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">sub</span><span class="si">}</span><span class="s">_Part2_Average_ROI_n50.csv</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">sub_data</span> <span class="o">=</span> <span class="n">part1</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">part2</span><span class="p">)</span>
    <span class="n">sub_data</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">sub_timeseries</span><span class="p">[</span><span class="n">sub</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub_data</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create new pandas DataFrame that has average vmPFC activity for each participant
</span><span class="n">roi</span> <span class="o">=</span> <span class="mi">32</span>

<span class="n">mask_x</span><span class="p">[</span><span class="n">roi</span><span class="p">].</span><span class="nf">plot</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">get_subject_roi</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">roi</span><span class="p">):</span>
    <span class="n">sub_rois</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">sub_rois</span><span class="p">[</span><span class="n">sub</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">sub</span><span class="p">].</span><span class="n">iloc</span><span class="p">[:,</span> <span class="n">roi</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">)</span>

<span class="n">sub_rois</span> <span class="o">=</span> <span class="nf">get_subject_roi</span><span class="p">(</span><span class="n">sub_timeseries</span><span class="p">,</span> <span class="n">roi</span><span class="p">)</span>
<span class="n">sub_rois</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
<span class="c1"># sub_rois size: voxels x subjects
</span></code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
    .dataframe table {
        width:100%; 
        overflow:auto
    }
</style>
<table border="1" class="dataframe">

  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sub-01</th>
      <th>sub-02</th>
      <th>sub-03</th>
      <th>sub-04</th>
      <th>sub-05</th>
      <th>sub-06</th>
      <th>sub-07</th>
      <th>sub-08</th>
      <th>sub-09</th>
      <th>sub-10</th>
      <th>sub-11</th>
      <th>sub-12</th>
      <th>sub-13</th>
      <th>sub-14</th>
      <th>sub-15</th>
      <th>sub-16</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3.362605</td>
      <td>-1.967253</td>
      <td>-0.243505</td>
      <td>2.527032</td>
      <td>5.166227</td>
      <td>-0.678549</td>
      <td>2.199253</td>
      <td>-1.646883e+00</td>
      <td>0.421235</td>
      <td>0.500547</td>
      <td>0.361623</td>
      <td>4.639737e+00</td>
      <td>1.490442</td>
      <td>1.806639</td>
      <td>1.039467</td>
      <td>3.483579e-13</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.995695</td>
      <td>1.730923</td>
      <td>1.552836</td>
      <td>1.068784</td>
      <td>4.066954</td>
      <td>0.117737</td>
      <td>3.184899</td>
      <td>8.464993e-01</td>
      <td>-0.118011</td>
      <td>0.981400</td>
      <td>-0.069505</td>
      <td>2.522244e+00</td>
      <td>1.145760</td>
      <td>-0.582861</td>
      <td>-0.420722</td>
      <td>-1.237187e-13</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2.084567</td>
      <td>-1.940155</td>
      <td>1.914897</td>
      <td>1.103097</td>
      <td>2.168681</td>
      <td>0.030628</td>
      <td>2.036096</td>
      <td>1.782011e-01</td>
      <td>0.984125</td>
      <td>3.957482</td>
      <td>-0.792416</td>
      <td>1.326291e+00</td>
      <td>0.472309</td>
      <td>-3.066318</td>
      <td>0.869296</td>
      <td>-1.931528e-02</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-0.217049</td>
      <td>-0.636084</td>
      <td>1.501459</td>
      <td>-0.701397</td>
      <td>1.704406</td>
      <td>0.042397</td>
      <td>2.353035</td>
      <td>1.088203e+00</td>
      <td>1.650786</td>
      <td>3.687806</td>
      <td>3.839885</td>
      <td>2.105321e-02</td>
      <td>-2.885314</td>
      <td>-1.212683</td>
      <td>1.213115</td>
      <td>-1.460159e+00</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-2.628723</td>
      <td>1.650023</td>
      <td>-1.196258</td>
      <td>0.079026</td>
      <td>1.297944</td>
      <td>-0.743593</td>
      <td>1.188282</td>
      <td>3.375227e-13</td>
      <td>1.515944</td>
      <td>-0.709527</td>
      <td>4.874887</td>
      <td>2.279356e-13</td>
      <td>-5.277045</td>
      <td>0.232831</td>
      <td>1.914874</td>
      <td>1.745742e+00</td>
    </tr>
  </tbody>
</table>
</div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_8_1.png" alt="png" width="100%" /></p>

<h2 id="hypothesis-testing-on-isc">Hypothesis Testing on ISC</h2>
<p>To perform ISC we will use nltools.stats.isc()
To perform hypothesis tests, we will implement three different non-parametric methods: circular shifting data, phase randomization, subject-wise bootstrap</p>

<h3 id="circular-shifting">Circular Shifting</h3>
<p>First, the idea behind circular shifting data is to generate random surrogate data that has the same autoregressive and temporal properties of the original data (Lancaster et al., 2018). This involves randomly selecting a time point to become the new beginning of the timeseries and then concatenating the rest of the data at the end so that it has the same length as the original data. Of course, there wil potentially be a sudden change in the data where the two parts were merged.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot one subject's time series and shift it using nltools.stats.circle_shift()
# Plot the coefficients from a fast fourier transform (shows frequency)
</span><span class="n">sub</span> <span class="o">=</span> <span class="sh">'</span><span class="s">sub-02</span><span class="sh">'</span>
<span class="n">sampling_freq</span> <span class="o">=</span> <span class="p">.</span><span class="mi">5</span>

<span class="n">f</span><span class="p">,</span><span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">[</span><span class="n">sub</span><span class="p">],</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Avg Activity</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (TR)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Observed Data</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

<span class="n">fft_data</span> <span class="o">=</span> <span class="nf">fft</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">[</span><span class="n">sub</span><span class="p">])</span>
<span class="n">freq</span> <span class="o">=</span> <span class="nf">fftfreq</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">fft_data</span><span class="p">),</span> <span class="mi">1</span><span class="o">/</span><span class="n">sampling_freq</span><span class="p">)</span>
<span class="n">n_freq</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">fft_data</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">freq</span><span class="p">[:</span><span class="n">n_freq</span><span class="p">],</span> <span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">fft_data</span><span class="p">)[:</span><span class="n">n_freq</span><span class="p">],</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency (Hz)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Amplitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Power Spectrum</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>

<span class="n">circle_shift_data</span> <span class="o">=</span> <span class="nf">circle_shift</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">[</span><span class="n">sub</span><span class="p">])</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">circle_shift_data</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Avg Activity</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (TR)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Circle Shifted Data</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

<span class="n">fft_circle</span> <span class="o">=</span> <span class="nf">fft</span><span class="p">(</span><span class="n">circle_shift_data</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">freq</span><span class="p">[:</span><span class="n">n_freq</span><span class="p">],</span> <span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">fft_circle</span><span class="p">)[:</span><span class="n">n_freq</span><span class="p">],</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency (Hz)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Amplitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Circle Shifted Power Spectrum</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_11_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compute ISC of vmPFC roi with 5000 permutations.
# isc() outputs a dictionary that contains ISC values, p-value, 95% confidence intervals, optimally returns 5000 samples
# parallel run
</span><span class="n">stats_circle</span> <span class="o">=</span> <span class="nf">isc</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">circle_shift</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_bootstraps</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span> <span class="n">return_bootstraps</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">ISC: </span><span class="si">{</span><span class="n">stats_circle</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">02</span><span class="si">}</span><span class="s">, p = </span><span class="si">{</span><span class="n">stats_circle</span><span class="p">[</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">03</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ISC: 0.074, p = 0.0002
</code></pre></div></div>

<h3 id="phase-randomization">Phase Randomization</h3>
<p>Second, phase randomization projects the data into frequency space using a fast fourier transform, preserves the Fourier amplitudes but randomizes the Fourier phases(angle representing the fraction of the cycle covered, e.g. 90deg), and then projects the data back into the time domain (Theiler et al., 1992, Lancaster et al., 2018). Similar to the circular shifting method, this generates a random surrogate of the data, while maintaining a similar temporal and autoregressive structure as the original data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># We will generate the same plots from above using nltools.stats.phase_randomize()
</span><span class="n">sub</span> <span class="o">=</span> <span class="sh">'</span><span class="s">sub-02</span><span class="sh">'</span>
<span class="n">sampling_freq</span> <span class="o">=</span> <span class="p">.</span><span class="mi">5</span>

<span class="n">f</span><span class="p">,</span><span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">[</span><span class="n">sub</span><span class="p">],</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Avg Activity</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (TR)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Observed Data</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

<span class="n">fft_data</span> <span class="o">=</span> <span class="nf">fft</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">[</span><span class="n">sub</span><span class="p">])</span>
<span class="n">freq</span> <span class="o">=</span> <span class="nf">fftfreq</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">fft_data</span><span class="p">),</span> <span class="mi">1</span><span class="o">/</span><span class="n">sampling_freq</span><span class="p">)</span>
<span class="n">n_freq</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">fft_data</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">freq</span><span class="p">[:</span><span class="n">n_freq</span><span class="p">],</span> <span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">fft_data</span><span class="p">)[:</span><span class="n">n_freq</span><span class="p">],</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency (Hz)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Amplitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Power Spectrum</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>

<span class="n">phase_random_data</span> <span class="o">=</span> <span class="nf">phase_randomize</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">[</span><span class="n">sub</span><span class="p">])</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">phase_random_data</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Avg Activity</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (TR)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Phase Randomized Data</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

<span class="n">fft_phase</span> <span class="o">=</span> <span class="nf">fft</span><span class="p">(</span><span class="n">phase_random_data</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">freq</span><span class="p">[:</span><span class="n">n_freq</span><span class="p">],</span> <span class="n">np</span><span class="p">.</span><span class="nf">abs</span><span class="p">(</span><span class="n">fft_phase</span><span class="p">)[:</span><span class="n">n_freq</span><span class="p">],</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency (Hz)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Amplitude</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Phase Randomized Power Spectrum</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_14_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compute ISC of vmPFC roi with 5000 permutations.
</span><span class="n">stats_phase</span> <span class="o">=</span> <span class="nf">isc</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">phase_randomize</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_bootstraps</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span> <span class="n">return_bootstraps</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">ISC: </span><span class="si">{</span><span class="n">stats_phase</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">02</span><span class="si">}</span><span class="s">, p = </span><span class="si">{</span><span class="n">stats_phase</span><span class="p">[</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">03</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ISC: 0.074, p = 0.0001
</code></pre></div></div>

<p>ISC values (median of the pairwise correlations) of the two permutation methods are identical. The p-values are also similar and likely reflect the limited precision of the possible p-values that can be computed using only 5000 permutations. For greater precision, increase the number of permutations but this will take longer to compute.</p>

<h3 id="subject-wise-bootstrapping">Subject-wise Bootstrapping</h3>
<p>Third, subject-wise bootstrapping is more conservative than the previously described permutation methods and is almost an order of magnitude faster shuffling the similarity matrix compared to recomputing the pairwise similarity for the null distribution (Chen et al., 2016). 
Bootstrapping vs Permutation
Bootstrapping is typically used more for generating confidence intervals around an estimator, while permutation tests are used for performing hypothesis tests. However, p-values can also be computed using a bootstrap by subtracting the ISC from the null distribution and evaluating the percent of samples from the distribution that are smaller than the ISC (Hall et al., 1991).</p>

<p>We illustrate what an example bootstrapped similarity matrix looks like.
Due to resampling with replacement, some subjects are repeatedly resampled and there are multiple values of perfect correlations found off the diagonal. 
This can be accounted for by using the median summary statistic of the lower triangle. However, Brainiak and nltools toolboxes convert these values to NaNs to minimize the impact of these outliers on the summary statistic.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bootstrap_subject_matrix</span><span class="p">(</span><span class="n">similarity_matrix</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">This function shuffles subjects within a similarity matrix based on recommendation by Chen et al., 2016</span><span class="sh">'''</span>
    
    <span class="n">random_state</span> <span class="o">=</span> <span class="nf">check_random_state</span><span class="p">(</span><span class="n">random_state</span><span class="p">)</span>
    <span class="n">n_sub</span> <span class="o">=</span> <span class="n">similarity_matrix</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">bootstrap_subject</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">random_state</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">n_sub</span><span class="p">),</span> <span class="n">size</span><span class="o">=</span><span class="n">n_sub</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">similarity_matrix</span><span class="p">[</span><span class="n">bootstrap_subject</span><span class="p">,</span> <span class="p">:][:,</span> <span class="n">bootstrap_subject</span><span class="p">]</span>


<span class="n">similarity</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="nf">pairwise_distances</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">).</span><span class="n">T</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">correlation</span><span class="sh">'</span><span class="p">)</span>

<span class="n">f</span><span class="p">,</span><span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">ncols</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">similarity</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">xticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Subject</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Subject</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Pairwise Similarity</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="nf">bootstrap_subject_matrix</span><span class="p">(</span><span class="n">similarity</span><span class="p">),</span> <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">xticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Subject</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Subject</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Bootstrapped Pairwise Similarity</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Bootstrapped Pairwise Similarity')
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_19_1.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stats_boot</span> <span class="o">=</span> <span class="nf">isc</span><span class="p">(</span><span class="n">sub_rois</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">bootstrap</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_bootstraps</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span> <span class="n">return_bootstraps</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">ISC: </span><span class="si">{</span><span class="n">stats_boot</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">02</span><span class="si">}</span><span class="s">, p = </span><span class="si">{</span><span class="n">stats_boot</span><span class="p">[</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">03</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ISC: 0.074, p = 0.0002
</code></pre></div></div>

<p>Now that we saved the null distributions, we can plot a histogram of the null distribution from each method including the confidence intervals.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">stats_boot</span><span class="p">[</span><span class="sh">'</span><span class="s">null_distribution</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">stats_boot</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">],</span> <span class="n">kde</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Bootstrap</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">stats_circle</span><span class="p">[</span><span class="sh">'</span><span class="s">null_distribution</span><span class="sh">'</span><span class="p">],</span> <span class="n">kde</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Bootstrap</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">stats_phase</span><span class="p">[</span><span class="sh">'</span><span class="s">null_distribution</span><span class="sh">'</span><span class="p">],</span> <span class="n">kde</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Bootstrap</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">ISC Values (correlation)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">ISC Null Distribution</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">stats_boot</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">],</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Observed ISC</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Bootstrap Null</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Circle Shift Null</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Phase Randomize Null</span><span class="sh">'</span><span class="p">],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">stats_boot</span><span class="p">[</span><span class="sh">'</span><span class="s">ci</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">stats_boot</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">],</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">stats_boot</span><span class="p">[</span><span class="sh">'</span><span class="s">ci</span><span class="sh">'</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">stats_boot</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">],</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">stats_circle</span><span class="p">[</span><span class="sh">'</span><span class="s">ci</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">orange</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">stats_circle</span><span class="p">[</span><span class="sh">'</span><span class="s">ci</span><span class="sh">'</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">orange</span><span class="sh">'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">stats_phase</span><span class="p">[</span><span class="sh">'</span><span class="s">ci</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">stats_phase</span><span class="p">[</span><span class="sh">'</span><span class="s">ci</span><span class="sh">'</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.lines.Line2D at 0x7fcae8aa0d90&gt;
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_22_1.png" alt="png" width="100%" /></p>

<p>Notice that the circle shift and phase randomization methods produce highly similar null distributions and confidence intervals.
, while the bootstrap method has a wider and less symmetric distribution with the current number of iterations. 
However, the observed ISC of 0.074 (red line) exceeds all of the samples from the null distribution yielding a very small p-value.</p>

<p>Now, let’s calculate ISC looping over each of the 50 ROIs from the whole-brain.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Loop over each ROI and grab the column from each subject's dataframe : get_subject_roi()
# Run ISC on the combined subject's ROI timeseries using the median method and compute hypothesis test using subject-wise bootstrap with 5000 samples : isc()
# Convert each correlation and p-value from each region back into Brain_Data instance : roi_to_brain()
</span><span class="n">isc_r</span><span class="p">,</span> <span class="n">isc_p</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">roi</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">):</span>
    <span class="n">stats</span> <span class="o">=</span> <span class="nf">isc</span><span class="p">(</span><span class="nf">get_subject_roi</span><span class="p">(</span><span class="n">sub_timeseries</span><span class="p">,</span> <span class="n">roi</span><span class="p">),</span> <span class="n">n_bootstraps</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">median</span><span class="sh">'</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">bootstrap</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">isc_r</span><span class="p">[</span><span class="n">roi</span><span class="p">],</span> <span class="n">isc_p</span><span class="p">[</span><span class="n">roi</span><span class="p">]</span> <span class="o">=</span> <span class="n">stats</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">],</span> <span class="n">stats</span><span class="p">[</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">]</span>
<span class="n">isc_r_brain</span><span class="p">,</span> <span class="n">isc_p_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isc_r</span><span class="p">),</span> <span class="n">mask_x</span><span class="p">),</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">isc_p</span><span class="p">),</span> <span class="n">mask_x</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the ISC values to visualize which regions had a higher overall ISC
</span><span class="n">isc_r_brain</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_26_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">view_img</span><span class="p">(</span><span class="n">isc_r_brain</span><span class="p">.</span><span class="nf">to_nifti</span><span class="p">())</span>
</code></pre></div></div>
<iframe src="/assets/isc_r_brain.html" height="450px" width="100%" style="border:none;"></iframe>

<p>Now, let’s threshold using bonferroni correction (p&lt;0.001 for k=50 parcellation). Alternatively, we can threshold using false discovery rate by setting thr=fdr(isc_p_brain.data).
Here, FDR is more conservative than bonferroni (try for yourself!).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">view_img_on_surf</span><span class="p">(</span><span class="nf">threshold</span><span class="p">(</span><span class="n">isc_r_brain</span><span class="p">,</span> <span class="n">isc_p_brain</span><span class="p">,</span> <span class="n">thr</span><span class="o">=</span><span class="p">.</span><span class="mi">001</span><span class="p">).</span><span class="nf">to_nifti</span><span class="p">())</span>
<span class="c1">#view_img_on_surf(threshold(isc_r_brain, isc_p_brain, thr=fdr(isc_p_brain.data)).to_nifti())
</span></code></pre></div></div>
<iframe src="/assets/surface_view_isc_r_brain.html" height="450px" width="100%" style="border:none;"></iframe>

<h2 id="intersubject-functional-connectivity">Intersubject Functional Connectivity</h2>
<p>We demonstrate how to perform ISFC using the averaging method. We iterate over each subject and compute the cross-correlation between each of the target subject’s ROIs with the average ROI response of the other subjects. This yields a separate ROI x ROI ISFC matrix for each subject. We use nltools.stats.isfc() but check out the Brainiak implementation for a faster and more feature rich option. I will do both :)</p>

<p>Plot the average of these ROI x ROI ISFC matrices as a heatmap.
The diagonal reflects the ROI’s ISC using the averaging method (rather than the pairwise method in the previous examples). 
Off diagonal values reflect the average ISFC between each ROI.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">sub_timeseries</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

<span class="n">isfc_output</span> <span class="o">=</span> <span class="nf">isfc</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="c1">#isfc_output = brainiak.isc.isfc(data)
</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">isfc_output</span><span class="p">).</span><span class="nf">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span> <span class="n">vmin</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">,</span> <span class="n">xticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Average ISFC</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">ROI</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">ROI</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(96.78333333333339, 0.5, 'ROI')
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_32_1.png" alt="png" width="100%" /></p>

<p>We can threshold the ISFC matrix by running a one-sample t-test on each ISFC value and correcting for multiple comparisons using FDR.
We can convert this into an adjacency matrix, by binarizing the continuous t-values. In this example, we are interested in exploring which regions have a positive ISFC. Thus, we use an arbitrary fdr threshold (q&lt;0.000001) in this example to create a sparse adjacency matrix.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span><span class="p">,</span> <span class="n">p</span> <span class="o">=</span> <span class="nf">ttest_1samp</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="n">x</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">isfc_output</span><span class="p">]),</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">thresh</span> <span class="o">=</span> <span class="nf">fdr</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="p">.</span><span class="mi">0000001</span><span class="p">)</span>
<span class="n">thresholded_t_pos</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">thresholded_t_pos</span><span class="p">[</span><span class="n">p</span> <span class="o">&gt;</span> <span class="n">thresh</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">thresholded_t_pos</span><span class="p">[</span><span class="n">thresholded_t_pos</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">thresholded_t_pos</span><span class="p">[</span><span class="n">thresholded_t_pos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">thresholded_t_pos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">thresholded_t_pos</span><span class="p">,</span> <span class="n">isfc_output</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">shape</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">thresholded_t_pos</span><span class="p">,</span> <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">xticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">yticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Positive ISFC Edges</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">ROI</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">ROI</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(96.78333333333339, 0.5, 'ROI')
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_34_1.png" alt="png" width="100%" /></p>

<p>We can now convert this adjacency matrix into a graph and can visualize which regions are functionally connected to the most other regions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_network</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">Plot the degree of the thresholded isfc Adjaceny matrix</span><span class="sh">'''</span>
    
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">Adjacency</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">'</span><span class="s">data must be an Adjacency instance.</span><span class="sh">'</span><span class="p">)</span>
        
    <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">15</span><span class="p">))</span>
    <span class="n">G</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">to_graph</span><span class="p">()</span>
    <span class="n">pos</span> <span class="o">=</span> <span class="n">nx</span><span class="p">.</span><span class="nf">kamada_kawai_layout</span><span class="p">(</span><span class="n">G</span><span class="p">)</span>
    <span class="n">node_and_degree</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="nf">degree</span><span class="p">()</span>
    <span class="n">nx</span><span class="p">.</span><span class="nf">draw_networkx_edges</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">4</span><span class="p">)</span>
    <span class="n">nx</span><span class="p">.</span><span class="nf">draw_networkx_labels</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">font_size</span><span class="o">=</span><span class="mi">14</span><span class="p">,</span> <span class="n">font_color</span><span class="o">=</span><span class="sh">'</span><span class="s">darkslategray</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">nx</span><span class="p">.</span><span class="nf">draw_networkx_nodes</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">nodelist</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">node_and_degree</span><span class="p">).</span><span class="nf">keys</span><span class="p">()),</span>
                           <span class="n">node_size</span><span class="o">=</span><span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">node_and_degree</span><span class="p">],</span>
                           <span class="n">node_color</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">node_and_degree</span><span class="p">).</span><span class="nf">values</span><span class="p">()),</span>
                           <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">Reds_r</span><span class="p">,</span> <span class="n">linewidths</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">edgecolors</span><span class="o">=</span><span class="sh">'</span><span class="s">darkslategray</span><span class="sh">'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    
<span class="nf">plot_network</span><span class="p">(</span><span class="nc">Adjacency</span><span class="p">(</span><span class="n">thresholded_t_pos</span><span class="p">,</span> <span class="n">matrix_type</span><span class="o">=</span><span class="sh">'</span><span class="s">similarity</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_36_0.png" alt="png" width="100%" /></p>

<p>To interpret this, let’s project the number of connections (i.e. degree) with each node back into brain space.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">degree</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="nc">Adjacency</span><span class="p">(</span><span class="n">thresholded_t_pos</span><span class="p">,</span> <span class="n">matrix_type</span><span class="o">=</span><span class="sh">'</span><span class="s">similarity</span><span class="sh">'</span><span class="p">).</span><span class="nf">to_graph</span><span class="p">().</span><span class="nf">degree</span><span class="p">()))</span>
<span class="n">brain_degree</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">degree</span><span class="p">,</span> <span class="n">mask_x</span><span class="p">)</span>
<span class="n">brain_degree</span><span class="p">.</span><span class="nf">plot</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_38_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">view_img_on_surf</span><span class="p">(</span><span class="n">brain_degree</span><span class="p">.</span><span class="nf">to_nifti</span><span class="p">())</span>
</code></pre></div></div>

<iframe src="/assets/surface_view_brain_degree.html" height="450px" width="100%" style="border:none;"></iframe>

<h2 id="temporal-dynamics-of-intersubject-synchrony">Temporal Dynamics of Intersubject Synchrony</h2>
<p>This section will help you build an intuition for the core concepts behind intersubject phase synchrony (ISPS). We will begin by creating an animation of the phase angles.</p>

<p>First, we will compute the instantaneous phase angle of average ROI activity for each subject. We will use an infinite impulse response (IIR) bandpass butterworth filter. This requires specifying the sampling_frequency in cycles per second (Hz) which is 1/tr, and lower and upper cutoff frequencies also in Hz. Then we will apply a hilbert transform and extract the phase angle for each time point.</p>

<p>Here, we extract signal from primary auditory cortex(roi 35) which we assume will synchronize strongly across participants, and use a lower bound cutoff frequency of 0.04Hz and an upper bound of 0.07Hz as recommended by Glerean et al. (2012).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">roi</span> <span class="o">=</span> <span class="mi">35</span>
<span class="n">tr</span> <span class="o">=</span> <span class="mf">1.5</span>
<span class="n">lowcut</span> <span class="o">=</span> <span class="p">.</span><span class="mi">04</span>
<span class="n">highcut</span> <span class="o">=</span> <span class="p">.</span><span class="mi">07</span>

<span class="n">phase_angles</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">angle</span><span class="p">(</span><span class="nf">hilbert</span><span class="p">(</span><span class="nf">_butter_bandpass_filter</span><span class="p">(</span><span class="nf">get_subject_roi</span><span class="p">(</span><span class="n">sub_timeseries</span><span class="p">,</span> <span class="n">roi</span><span class="p">),</span> <span class="n">lowcut</span><span class="p">,</span> <span class="n">highcut</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="n">tr</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div></div>

<p>To visualize data, we will plot 100 TRs of each participant’s phase angles from the auditory cortex using a polar plot. 
For some time points all subjects have a different phase angle. These time points should have low synchrony values (i.e. resultant vector length close to zero). 
Other time points the phase angles will cluster together and all face the same direction. These time points will have high phase synchrony (i.e. resultant vector length close to one).
We can also comput the mean phase angle for the group using circular statistics (red line). We don’t care so much about the mean angle bu rather the <strong>length of the resultant vector</strong>. This is our metric of intersubject phase clustering, or the degree to which participants are in phase with each other at a given time point. Notice how the length gets shorter the more participants are our of phase and longer when they are all facing the same direction.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xs</span><span class="p">,</span> <span class="n">ys</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">constrained_layout</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">spec</span> <span class="o">=</span> <span class="n">gridspec</span><span class="p">.</span><span class="nc">GridSpec</span><span class="p">(</span><span class="n">ncols</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">figure</span><span class="o">=</span><span class="n">fig</span><span class="p">)</span>

<span class="n">a0</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">add_subplot</span><span class="p">(</span><span class="n">spec</span><span class="p">[:</span><span class="mi">2</span><span class="p">,</span> <span class="p">:</span><span class="mi">2</span><span class="p">],</span> <span class="n">projection</span><span class="o">=</span><span class="sh">'</span><span class="s">polar</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">polar</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nf">_phase_mean_angle</span><span class="p">(</span><span class="n">phase_angles</span><span class="p">[</span><span class="mi">0</span><span class="p">,:])],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>

<span class="n">a1</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">add_subplot</span><span class="p">(</span><span class="n">spec</span><span class="p">[:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">],</span> <span class="n">projection</span><span class="o">=</span><span class="sh">'</span><span class="s">polar</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">polar</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="n">phase_angles</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">navy</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">2</span><span class="p">)</span>

<span class="n">a2</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">add_subplot</span><span class="p">(</span><span class="n">spec</span><span class="p">[</span><span class="mi">2</span><span class="p">:,</span> <span class="p">:])</span>
<span class="n">a2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="nf">_phase_vector_length</span><span class="p">(</span><span class="n">phase_angles</span><span class="p">))</span>
<span class="n">a2</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Phase Synchrony</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a2</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (TRs)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">animate</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">):</span>
    <span class="n">xs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">ys</span> <span class="o">=</span> <span class="n">phase_angles</span><span class="p">[:</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="p">:]</span>
    
    <span class="n">a0</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
    <span class="n">a0</span><span class="p">.</span><span class="nf">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nf">_phase_mean_angle</span><span class="p">(</span><span class="n">phase_angles</span><span class="p">[</span><span class="n">i</span><span class="p">,:])],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="nf">_phase_vector_length</span><span class="p">(</span><span class="n">phase_angles</span><span class="p">[</span><span class="n">i</span><span class="p">,:])],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">a0</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Mean Phase Angle</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
    <span class="n">a0</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
    
    <span class="n">a1</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">ys</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
        <span class="n">a1</span><span class="p">.</span><span class="nf">plot</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="n">phase_angles</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">navy</span><span class="sh">'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span>  
    <span class="n">a1</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Subject Phase Angles</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>

    <span class="n">a2</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
    <span class="n">a2</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="nf">_phase_vector_length</span><span class="p">(</span><span class="n">ys</span><span class="p">))</span>
    <span class="n">a2</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">a2</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Resultant Vector Length</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
    <span class="n">a2</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (TRs)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
    <span class="n">a2</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Intersubject Phase Synchrony</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
    
<span class="n">animation</span> <span class="o">=</span> <span class="nc">FuncAnimation</span><span class="p">(</span><span class="n">fig</span><span class="p">,</span> <span class="n">animate</span><span class="p">,</span> <span class="n">fargs</span><span class="o">=</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">),</span> <span class="n">frames</span><span class="o">=</span><span class="nf">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">),</span> <span class="n">interval</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">blit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">animation</span><span class="p">.</span><span class="n">_fig</span><span class="p">)</span>
<span class="nc">HTML</span><span class="p">(</span><span class="n">animation</span><span class="p">.</span><span class="nf">to_jshtml</span><span class="p">())</span>
</code></pre></div></div>

<iframe src="/assets/intersubject_phase_sync.html" height="750px" width="100%" style="border:none;"></iframe>

<p>Now, let’s pick a frequency band and plot the average phase synchrony over the entire 50min Sherlock viewing within each ROI from out parcellation. Let’s continue using a lower bound cutoff frequency of 0.04Hz and an upper bound of 0.07Hz.</p>

<p>We loop over each ROI and compute average ISPS over time and then project back into brain space.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cutoff</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.04</span><span class="p">,</span> <span class="mf">0.07</span><span class="p">)</span>
<span class="n">synchrony</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">roi</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">):</span>
    <span class="n">synchrony</span><span class="p">[</span><span class="n">roi</span><span class="p">]</span> <span class="o">=</span> <span class="nf">isps</span><span class="p">(</span><span class="nf">get_subject_roi</span><span class="p">(</span><span class="n">sub_timeseries</span><span class="p">,</span> <span class="n">roi</span><span class="p">),</span> <span class="n">low_cut</span><span class="o">=</span><span class="n">cutoff</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">high_cut</span><span class="o">=</span><span class="n">cutoff</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">sampling_freq</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">tr</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="mi">5</span><span class="p">)[</span><span class="sh">'</span><span class="s">vector_length</span><span class="sh">'</span><span class="p">]</span>
<span class="n">synchrony</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">synchrony</span><span class="p">)</span>

<span class="n">phase_synchrony_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">synchrony</span><span class="p">).</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">mask_x</span><span class="p">)</span>
<span class="n">phase_synchrony_brain</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_45_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create an interactive surface rendering
</span><span class="nf">view_img_on_surf</span><span class="p">(</span><span class="n">phase_synchrony_brain</span><span class="p">.</span><span class="nf">to_nifti</span><span class="p">())</span>
</code></pre></div></div>

<iframe src="/assets/surface_view_brain_sync.html" height="450px" width="100%" style="border:none;"></iframe>

<p>You can see that these results look very similar to the whole timeseries ISC apporach we used above. High overall synchrony across participants within primary auditory and visual cortices and lower overall synchrony in prefrontal and limbic regions.</p>

<p>Previously, we looked at a specific frequency band (0.04-0.07Hz). It’s possible that participants might differently synchronize within different frequency bands (Honey et al., 2012; Kauppi et al., 2010). 
Let’s create a time-frequency plot to see how ISPS changes over time within different frequency for a given ROI. We will explore the dorsomedial prefrontal cortex (roi 2).</p>

<p>We will loop over different cutoff bands. These values are based on the slow frequency bands described in Buszaki &amp; Draguhun (2003) and Zuo et al. (2010), but are admittedly somewhat arbitrarily selected. Brighter colors indicate time points that have a higher level of ISPS within a specific TR.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tr</span> <span class="o">=</span> <span class="mf">1.5</span>
<span class="n">roi</span> <span class="o">=</span> <span class="mi">2</span>

<span class="n">frequencies</span> <span class="o">=</span> <span class="p">[(</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.027</span><span class="p">),(</span><span class="mf">0.027</span><span class="p">,</span> <span class="mf">0.073</span><span class="p">),(</span><span class="mf">0.073</span><span class="p">,</span> <span class="mf">0.198</span><span class="p">),(</span><span class="mf">0.198</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">)]</span>

<span class="n">time_freq</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">cutoff</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">frequencies</span><span class="p">):</span>
    <span class="n">time_freq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">isps</span><span class="p">(</span><span class="nf">get_subject_roi</span><span class="p">(</span><span class="n">sub_timeseries</span><span class="p">,</span> <span class="n">roi</span><span class="p">),</span> <span class="n">low_cut</span><span class="o">=</span><span class="n">cutoff</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">high_cut</span><span class="o">=</span><span class="n">cutoff</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">sampling_freq</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">tr</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="mi">5</span><span class="p">)[</span><span class="sh">'</span><span class="s">vector_length</span><span class="sh">'</span><span class="p">]</span>
    
<span class="n">time_freq</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">time_freq</span><span class="p">).</span><span class="n">T</span>
<span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">time_freq</span><span class="p">).</span><span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">0.01 - .027Hz</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">0.027 - 0.073Hz</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">0.073 - 0.198Hz</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">0.198 - 0.25Hz</span><span class="sh">'</span><span class="p">]</span>

<span class="n">mask_x</span><span class="p">[</span><span class="n">roi</span><span class="p">].</span><span class="nf">plot</span><span class="p">()</span>
<span class="n">f</span><span class="p">,</span><span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">time_freq</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">hot</span><span class="sh">'</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">xticklabels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">a</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">ROI Time - Frequency Analysis</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency Band (Hz)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Time (TRs)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_49_0.png" alt="png" width="100%" /></p>

<p><img src="/assets/img/isc/Intersubject%20Correlation_49_1.png" alt="png" width="100%" /></p>

<p>Hypothesis test</p>

<p>Statistics for time-varying measures of synchrony largely follow a similar non-parametric approach as discussed above. However, depending on the values used, statistics of phase synchrony differ slightly from linear measures of synchrony. In particular, circular statistics (Fisher, 1995) can be used to estimate the parametric statistics of phase differences on the unit circle, as wrapping of the phase angle (change the range of angle) cause the angular difference to change signs as the signals rotate around the circle.</p>

<p>For a parametric test, we use the Rayleigh test to determine if the ISPS is statistically significant, by testing the null hypothesis that the phase angles are uniformly distributed around a circle (Fisher, 1995). If the phase angles cluster together in specific direction, they will have a large resultant vector and we can rejct the null uniformity hypothesis.</p>

<p>Let’s simulate what ISPS values would be significant at p&lt;0.05 given the sample size of N=16 in the Sherlock dataset. 
Plot the estimated p-values using the Rayleigh test across ISPS values ranging from [0,1].</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">16</span>
<span class="n">R</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="p">.</span><span class="mi">01</span><span class="p">)</span>
<span class="n">Z</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="p">(</span><span class="n">R</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="n">Z</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">Z</span> <span class="o">-</span> <span class="n">Z</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="mi">24</span><span class="o">*</span><span class="n">Z</span> <span class="o">-</span> <span class="mi">132</span><span class="o">*</span><span class="n">Z</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span><span class="mi">76</span><span class="o">*</span><span class="n">Z</span><span class="o">**</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">9</span><span class="o">*</span><span class="n">Z</span><span class="o">**</span><span class="mi">4</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">288</span><span class="o">*</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">R</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axhline</span><span class="p">(.</span><span class="mi">05</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(.</span><span class="mi">43</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">darkgrey</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">p-Value</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Synchrony (Resultant Vector)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Rayleigh p-value Simulation for N=16</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">ISPS Values</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">p &lt; 0.05</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ISPS = 0.43</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.legend.Legend at 0x7fcae8810d90&gt;
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_51_1.png" alt="png" width="100%" /></p>

<p>For N=16, an ISPS value of 0.43 corresponds to a significance value of approximately p&lt;0.05. This number will decrease as the number of participants increases and approaches the central limit theorem like any significance test.</p>

<p>Note that you will need to consider controlling for multiple comparisons when repeated testing the same hypothesis across either space or time.</p>

<p>Now, let’s put this all together and compute ISPS at different frequency bands thresholding at a very liberal threshold of p&lt;0.05.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span><span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">nrows</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">frequencies</span><span class="p">),</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">cutoff</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">frequencies</span><span class="p">):</span>
    <span class="n">synchrony</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">roi</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">):</span>
        <span class="n">synchrony</span><span class="p">[</span><span class="n">roi</span><span class="p">]</span> <span class="o">=</span> <span class="nf">isps</span><span class="p">(</span><span class="nf">get_subject_roi</span><span class="p">(</span><span class="n">sub_timeseries</span><span class="p">,</span> <span class="n">roi</span><span class="p">),</span> <span class="n">low_cut</span><span class="o">=</span><span class="n">cutoff</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">high_cut</span><span class="o">=</span><span class="n">cutoff</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">sampling_freq</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">tr</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="mi">5</span><span class="p">)[</span><span class="sh">'</span><span class="s">vector_length</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">phase_synchrony_brain</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">synchrony</span><span class="p">).</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">mask_x</span><span class="p">)</span>
    <span class="n">phase_synchrony_brain</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">threshold</span><span class="o">=</span><span class="p">.</span><span class="mi">43</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">Frequency cutoff: </span><span class="si">{</span><span class="n">cutoff</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s"> - </span><span class="si">{</span><span class="n">cutoff</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_53_0.png" alt="png" width="100%" /></p>

<p>ISPS Functional Connectivity Analysis.</p>

<p>There are lots of interesting potential analysis made possible by dynamic conenctivity measures such as ISPS, and a very exploratory ISPS functional connectivity analysis.</p>

<p>Here, we will explore which brain regions have a similar shared dynamic synchrony while watching Sherlock. Note that this is slightly different to the ISFC analysis above as we are calculating the similarity of local synchrony rather similarity of brain activity directly. We simply compute the <strong>pairwise temporal similarity of each ROI’s ISPS time series.</strong> We can threshold these correlations with an arbitrary threshold to create a sparse adjency matrix.</p>

<p><strong>Thoughts:</strong> I am a bit skeptical about interpreting this metric. ISPS represents how similar time-varying brain activities are among participants for each ROI. Then, we compute the pairwise temporal similarity of those similarities for all ROIs. This does not seem to be a true metric of how similarity of activity timecourses between ROIs (FC) are dynamically synchronized between participants. Instead, the time-varying FC should be calculated for each subject and then</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">synchrony</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">roi</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">50</span><span class="p">):</span>
    <span class="n">stats</span> <span class="o">=</span> <span class="nf">isps</span><span class="p">(</span><span class="nf">get_subject_roi</span><span class="p">(</span><span class="n">sub_timeseries</span><span class="p">,</span> <span class="n">roi</span><span class="p">),</span> <span class="n">low_cut</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">high_cut</span><span class="o">=</span><span class="mf">0.027</span><span class="p">,</span> <span class="n">sampling_freq</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">tr</span><span class="p">)</span>
    <span class="n">synchrony</span><span class="p">[</span><span class="n">roi</span><span class="p">]</span> <span class="o">=</span> <span class="n">stats</span><span class="p">[</span><span class="sh">'</span><span class="s">vector_length</span><span class="sh">'</span><span class="p">]</span>
<span class="n">synchrony</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">synchrony</span><span class="p">)</span>

<span class="n">sync</span> <span class="o">=</span> <span class="nc">Adjacency</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="nf">pairwise_distances</span><span class="p">(</span><span class="n">synchrony</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">metric</span><span class="o">=</span><span class="sh">'</span><span class="s">correlation</span><span class="sh">'</span><span class="p">),</span> <span class="n">matrix_type</span><span class="o">=</span><span class="sh">'</span><span class="s">similarity</span><span class="sh">'</span><span class="p">)</span>

<span class="n">f</span><span class="p">,</span><span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">ncols</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>

<span class="n">sync</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">vmin</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">,</span> <span class="n">axes</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">cbar</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">sync</span><span class="p">.</span><span class="nf">threshold</span><span class="p">(</span><span class="n">upper</span> <span class="o">=</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span> <span class="n">binarize</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="nf">plot</span><span class="p">(</span><span class="n">axes</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">cbar</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">ISPS Functional Connectivity Matrix</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Thresholded ISPS Functional Connectivity Matrix</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_55_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create a graph of the thresholded edges using the networkx package
</span><span class="nf">plot_network</span><span class="p">(</span><span class="n">sync</span><span class="p">.</span><span class="nf">threshold</span><span class="p">(</span><span class="n">upper</span> <span class="o">=</span> <span class="p">.</span><span class="mi">3</span><span class="p">,</span> <span class="n">binarize</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_56_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Calculate the degree for each node and project back into brain space
</span><span class="n">degree</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">sync</span><span class="p">.</span><span class="nf">threshold</span><span class="p">(</span><span class="n">upper</span><span class="o">=</span><span class="p">.</span><span class="mi">2</span><span class="p">,</span> <span class="n">binarize</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="nf">to_graph</span><span class="p">().</span><span class="nf">degree</span><span class="p">()))</span>
<span class="n">brain_degree</span> <span class="o">=</span> <span class="nf">roi_to_brain</span><span class="p">(</span><span class="n">degree</span><span class="p">,</span> <span class="n">mask_x</span><span class="p">)</span>
<span class="n">brain_degree</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/img/isc/Intersubject%20Correlation_57_0.png" alt="png" width="100%" /></p>]]></content><author><name></name></author><category term="naturalistic-data-analysis" /><category term="neuroimaging" /><category term="psychology" /><category term="analysis-methods" /><summary type="html"><![CDATA[tutorial for intersubject correlation]]></summary></entry><entry><title type="html">Intersubject Correlation</title><link href="https://naeunoh.github.io/blog/2022/intersubject-correlation/" rel="alternate" type="text/html" title="Intersubject Correlation" /><published>2022-07-17T15:09:00+00:00</published><updated>2022-07-17T15:09:00+00:00</updated><id>https://naeunoh.github.io/blog/2022/intersubject-correlation</id><content type="html" xml:base="https://naeunoh.github.io/blog/2022/intersubject-correlation/"><![CDATA[<p>Contents : Intersubject Correlation, ISFC, dynamic ISC (ISPS)</p>

<p>Synchrony of brain activity is associated with shared psychological perspectives toward a stimulus, friendship, and psychiatric conditions. <strong>Intersubject Correlation (ISC)</strong> (Hasson et al., 2004) calculates linear correlations between participants (pairwise or similarity to average) and derives summary statistics (overall level of synchrony) from these correlations to measure the level of similarity of brain activity.</p>

<p>The brain activity measured with fMRI during naturalistic stimulation conditions (but also applies to controlled tasks or resting-state, honestly) can be thought to consist of four main sources :</p>

<blockquote>
  <ol>
    <li>Stimulus-driven brain activity that is shared by most participants</li>
    <li>Individual / Idiosyncratic activity elicited by the stimulus</li>
    <li>Intrinsic activity that is not time-locked to the stimulus</li>
    <li>Noise from various sources</li>
  </ol>
</blockquote>

<p>(1) The idea behind ISC is to identify brain activity that is shared by many. Thus, this method evaluates how much of an individual’s brain activity is explained by this shared component.</p>

<p>(2) By contrast, if smaller groups of participants (e.g. friends) share similar individual activity patterns, it may be better captured by the dyadic values in the pairwise matrices using techniques such as Intersubject Representational Similarity Analysis (IS-RSA).</p>

<p>(3) The third category of activity is not readily detected by synchrony approaches, but in some innovative designs (Chen et al., 2017), it is still possible to extract shared brain activity patterns by temporally reorganizing the data (e.g. during verbal recall of previously experienced stimuli) even when the original experiences of participants were out of sync.</p>

<p><strong>Thoughts:</strong> How is (3) different from resting-state? 
Resting-state involves no external synchronizing factors apart from the repeating noise of the scanner gradients (and noise is not of our interest) and thus is ideal for demonstrating the true null distribution of no synchrony. Thus, resting state would involve both 3 and 4.</p>

<p>ISC are mostly calculated locally within each voxel or region, but in theory, we could calculate brain similarity based on any type of information we can extract from single subjects’ neuroimaging data. For example, we could use functional connectivity (Glerean et al., 2016), or compare subjects’ temporal trajectories over the course of a stimulus using low-dimensional topological embeddings (e.g., Gonzalez-Castillo et al., 2019; Saggar et al., 2018), latent state discovery (Chang et al., 2018), or projection into a higher-order space using recurrent neural networks (Venkatesh et al., 2019)</p>

<h3 id="calculating-isc">Calculating ISC</h3>

<p>The first step of ISCs is <em>calculating individual synchrony</em> using one of two main approaches. First, one calculates pairwise correlations between all participant pairs to build a full intersubject correlation matrix. The second approach uses the average activity timecourse of other participants as a model for each individual left out participant. This produces individual, rather than pairwise, spatial maps of similarity (how typical one’s brain activation is) in the same way first level results of a traditional general linear model analysis would. However, some individual variability is lost with the average similarity approach and ISC values are typically higher than pairwise matrices.</p>

<p>The second step is to <em>summarize the overall level of synchrony across participants</em>. One can use the mean correlation. To make the correlation coefficients more normally distributed across the range of values, the Fisher’s Z transformation (inverse hyperbolic tangent) is applied before computing the mean. This transformation mainly affects the higher absolute correlation values, thus stretching the correlation coefficient 1 to infinity. However, as pairwise ISC values are typically not that high, the effects of this transformation are relatively small reaching less than 10% at the higher end of the scale of \(r=0.5\). Recently, it has been suggested that computing the median, especially when using the pairwise approach, provides a more accurate summary of the correlation values (Chen et al., 2016).</p>

<h3 id="hypothesis-tests-with-isc">Hypothesis Tests with ISC</h3>

<p>Now, we will perform hypothesis tests with ISC. Performing hypothesis tests that account for the false positive rate can be tricky with ISC because of the dependence between the pairwise correlation values and the inflated number of variables in the pairwise correlation matrices. Although there have been proposals to use mixed-effects models for a parametric solution (Chen et al., 2017), <em>non-parametric statistics</em> are recommended.</p>

<p>The first non-parametric approach is <em>permutation</em> or randomization achieved by creating surrogate (artificial, fake) data and repeating the same analysis many times to build an empirical null distribution (e.g. 5-10k iterations). The null distribution represents the condition where any correlations in the data arise by chance (like a resting state condition). However, to meet the exchangeability assumption of permutation, it is important to consider the temporal dependence structure (because our data is sequential). Surrogate data can be created by circularly shifting the timecourses of the participants (circular shifting) or by scrambling the phases of the Fourier transform of the signals and transforming these signals back to the time domain (phase randomization). Various blockwise scrambling techniques and autoregressive models have been proposed to create artificial data for statistical inference. When properly designed, these methods can retain important characteristics of the original signal (e.g. frequency content and autocorrelation) while removing temporal synchrony in the data.</p>

<p>The second non-parametric approach employs a <em>subject-wise bootstrap</em> on the pairwise similarity matrices. Participants are randomly sampled with replacement and then a new similarity matrix is computed with these resampled participants. Due to replacement sampling, sometimes the same subjects are sampled multiple times which introduces correlation values of 1 off the diagonal. Thus, summarizing the ISC with median can minimize the impact of these outliers. These values are then shifted by the real summary statistics to produce an approximately zero-centered distribution? Note that Brainiak and nltools convert these values to <em>NaNs</em> by default.</p>

<h3 id="intersubject-functional-connectivity-isfc">Intersubject Functional Connectivity (ISFC)</h3>

<p>To address how brain regions coactivate due to naturalistic stimulation, ISC was recently extended to <strong>intersubject functional connectivity (ISFC)</strong> to measure brain connectivity between subjects (Simony et al., 2016). This method can identify connections that are activated consistently between participants by the stimulus while disregarding the intrinsic fluctuations as they are not time-locked between individuals. (This is very effective as FC fluctuate a lot) This can also illustrate how distant brain regions cooperate to make sense of the incoming stimulus streams. However, it can also highlight pairs of regions that show similar temporal activity patterns that are driven by the external stimulus (just happen to activate at the same time) rather than neural connections between the regions (causality in the brain), which should be taken into account in the interpretation. This is an intrinsic problem of FC due to the way connectivity is calculated (correlation).</p>

<p><img src="/assets/img/isc/isfc-figure-Simony2016.png" alt="isfc" width="100%" /></p>
<div align="center">Simony et al. (2016)</div>

<h3 id="dynamic-isc">Dynamic ISC</h3>

<p>Intersubject correlations give a summary statistic of synchrony over long periods of time. However, as the level of synchrony may change from one moment to the next (“dynamic”), <strong>time-varying measures of synchrony are also employed (e.g. dynamic ISC)</strong>. For instance, tools like correlation assume a constant statistical dependence between the variables over the entire imaging session and thus may not be the most appropriate way to analyze data gathered during complex naturalistic stimulation.</p>

<p>We want to calculate temporal variability of synchrony while limiting the effects of signal amplitudes. In other words, we don’t want the correlations between two signals to fluctuate depending on their amplitudes.</p>

<p>A simple way is to calculate correlations within <em>sliding time windows</em>. This allows the estimation of synchrony during time windows when the signals are close to their mean values as the amplitude within each time window is standardized when the correlation is calculated. However, the length of the temporal window forces a trade-off between temporal accuracy and stability of the correlation coefficient calculated in that window. Very short time windows allow one to follow precisely when correlations occur, but they also yield extremely unstable correlations with extreme correlation values that change signs wildly, which can be dominated completely by (unreliable signals like) single co-occuring spikes or slopes.</p>

<p>Another option is to calculate the phase synchronization or phase locking of signals (<strong>Intersubject Phase Synchrony, ISPS</strong>). This has been used widely for electrophysiological measures such as EEG and MEG, and more recently also for fMRI (Glerean et al., 2012). Phase synchronization leverages the Hilbert transform to transform the real-valued signals into a complex valued, analytic signal, which is a generalization of the phasor notation of sinusoidal signals that are widely used in engineering applications.</p>

<p>(Whoa… what does that even mean? Let’s look more into this.)</p>

<p>The illustration below shows two examples of analytic signals with constant frequency and amplitude, plotted in three dimensions (real, imaginary, and time axes). We have used the cosine of the angular difference as a measure of pairwise synchrony (cosine similarity). This produces time-averaged values that are consistent with the ISCs in the regions. In contrast to a time-invariant phasor (<a href="https://en.wikipedia.org/wiki/Phasor">phase vector</a>), an analytic signal has a time-varying amplitude envelope (wave) and frequency and can thus be used to track changes in synchrony over time. However, for meaningful separation of the envelope and phase of the signal, the original signal must be contained in a limited frequency band, which can be obtained through <em>band-pass filtering</em>. The smaller this frequency band is, the better the amplitude envelope is separated into a lower frequency than the phase of the signal in the pass-band. However, poorly designed filters may affect the shape of the signal considerably and even remove the signal of interest. For instance, some filters can cause non-linear phase shifts across the frequency spectrum, or an excessively tight pass-band may miss important frequencies completely.</p>

<p><img src="/assets/img/isc/PhaseSynchronyAndCorrelation.gif" alt="phase_synchrony" width="100%" /></p>

<p>Compared to sliding-window correlations, phase synchronization has the benefit that no explicit time windows are required and synchronization is estimated at the original sampling frequency of the signals (though you need to choose a narrow frequency band). However, in a single pairwise comparison, phase synchrony can get extreme values by chance even when the two signals are independent. Accordingly, the estimate of mean synchrony oscillates with the phase of the signals, until eventually stabilizing around zero as expected for independent signals. Thus, phase synchrony of two signals does have the potential of producing extreme values like the sliding-window correlations. This can be mitigated by averaging over the timepoints of a full session, which will produce ISPS that is similar to group-level results of ISC. But then, this removes the benefit of the temporal accuracy of ISPS. By contrast, <em>averaging over (pairs of) subjects</em> improves the reliability of synchrony in a larger population while retaining the temporal accuracy.</p>]]></content><author><name></name></author><category term="naturalistic-data-analysis" /><category term="neuroimaging" /><category term="psychology" /><category term="analysis-methods" /><summary type="html"><![CDATA[synchrony as reliability of brain activity]]></summary></entry><entry><title type="html">Functional Alignment Notebook</title><link href="https://naeunoh.github.io/blog/2022/functional-alignment-code/" rel="alternate" type="text/html" title="Functional Alignment Notebook" /><published>2022-07-16T20:09:00+00:00</published><updated>2022-07-16T20:09:00+00:00</updated><id>https://naeunoh.github.io/blog/2022/functional-alignment-code</id><content type="html" xml:base="https://naeunoh.github.io/blog/2022/functional-alignment-code/"><![CDATA[<h1 id="functional-alignment">Functional Alignment</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">glob</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">from</span> <span class="n">nltools.mask</span> <span class="kn">import</span> <span class="n">create_sphere</span><span class="p">,</span> <span class="n">expand_mask</span>
<span class="kn">from</span> <span class="n">nltools.data</span> <span class="kn">import</span> <span class="n">Brain_Data</span><span class="p">,</span> <span class="n">Adjacency</span>
<span class="kn">from</span> <span class="n">nltools.stats</span> <span class="kn">import</span> <span class="n">align</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">matplotlib.gridspec</span> <span class="k">as</span> <span class="n">gridspec</span>
<span class="kn">from</span> <span class="n">nilearn.plotting</span> <span class="kn">import</span> <span class="n">plot_stat_map</span>
<span class="kn">import</span> <span class="n">datalad.api</span> <span class="k">as</span> <span class="n">dl</span>
<span class="kn">import</span> <span class="n">warnings</span>

<span class="n">warnings</span><span class="p">.</span><span class="nf">simplefilter</span><span class="p">(</span><span class="sh">'</span><span class="s">ignore</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>It is highly recommended to configure Git before using DataLad. Set both 'user.name' and 'user.email' configuration variables.
</code></pre></div></div>

<h2 id="get-dataset-using-datalad">Get Dataset using datalad</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_dir</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/Users/naeun-oh/Sherlock</span><span class="sh">'</span>

<span class="c1"># If dataset hasn't been installed, clone from GIN repository
</span><span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">data_dir</span><span class="p">):</span>
    <span class="n">dl</span><span class="p">.</span><span class="nf">clone</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="sh">'</span><span class="s">https://gin.g-node.org/ljchang/Sherlock</span><span class="sh">'</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="n">data_dir</span><span class="p">)</span>

<span class="c1"># Initialize dataset
</span><span class="n">ds</span> <span class="o">=</span> <span class="n">dl</span><span class="p">.</span><span class="nc">Dataset</span><span class="p">(</span><span class="n">data_dir</span><span class="p">)</span>

<span class="n">ds</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">annex</span><span class="o">=</span><span class="sh">'</span><span class="s">all</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1;31muntracked[0m: fmriprep/sub-02/.DS_Store ([1;35mfile[0m)
1350 annex'd files (25.1 GB/109.0 GB present/total size)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Get Cropped &amp; Denoised HDF5 Files  : takes a very very long time
</span><span class="n">result</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="s">*crop*hdf5</span><span class="sh">'</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1;1mget[0m([1;32mok[0m): fmriprep/sub-01/func/sub-01_denoise_crop_smooth6mm_task-sherlockPart2_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-05/func/sub-05_denoise_crop_smooth6mm_task-sherlockPart1_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-06/func/sub-06_denoise_crop_smooth6mm_task-sherlockPart2_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-11/func/sub-11_denoise_crop_smooth6mm_task-sherlockPart1_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-12/func/sub-12_denoise_crop_smooth6mm_task-sherlockPart1_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-08/func/sub-08_denoise_crop_smooth6mm_task-sherlockPart2_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-02/func/sub-02_denoise_crop_smooth6mm_task-sherlockPart1_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-05/func/sub-05_denoise_crop_smooth6mm_task-sherlockPart2_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-04/func/sub-04_denoise_crop_smooth6mm_task-sherlockPart2_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-12/func/sub-12_denoise_crop_smooth6mm_task-sherlockPart2_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-06/func/sub-06_denoise_crop_smooth6mm_task-sherlockPart1_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-09/func/sub-09_denoise_crop_smooth6mm_task-sherlockPart1_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-04/func/sub-04_denoise_crop_smooth6mm_task-sherlockPart1_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
[1;1mget[0m([1;32mok[0m): fmriprep/sub-03/func/sub-03_denoise_crop_smooth6mm_task-sherlockPart1_space-MNI152NLin2009cAsym_desc-preproc_bold.hdf5 ([1;35mfile[0m) [from origin...]
action summary:
  get (notneeded: 18, ok: 14)
</code></pre></div></div>

<p>Hyperalignment was developed at Dartmouth College and is implemented in the PyMVPA toolbox. There is a tutorial on the PyMVPA website for how to implement different versions of hyperalignment. The Shared Response Model was developed at Princeton University and is implemented in the brainiak toolbox and I also encourage you to see their excellent tutorial.</p>

<h2 id="reponse-based-hyperalignment">Reponse-based Hyperalignment</h2>
<p>Functional alignment is usually performed within an ROI. The original hyperalignment papers align within searchlights over the whole brain. 
Here, we will align within regions of interest (ROI) from whole-brain functional parcellations. We will use a n=50 parcellation based on patterns of coactivation from the Neurosynth database (de la Vega et al.,2016)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ROI mask
</span><span class="n">mask</span> <span class="o">=</span> <span class="nc">Brain_Data</span><span class="p">(</span><span class="sh">'</span><span class="s">https://neurovault.org/media/images/8423/k50_2mm.nii.gz</span><span class="sh">'</span><span class="p">)</span>
<span class="n">mask_x</span> <span class="o">=</span> <span class="nf">expand_mask</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
<span class="n">mask</span><span class="p">.</span><span class="nf">plot</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_6_0.png" alt="png" width="100%" /></p>

<p>As an example, let’s extract voxel activity within the early visual cortex (i.e. ROI 4) from the second half of Sherlock (i.e. Part2) using hdf5 files.
Brain_Data class of nltools loads data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example of single ROI
</span><span class="n">scan</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Part2</span><span class="sh">'</span>
<span class="n">roi</span> <span class="o">=</span> <span class="mi">4</span>

<span class="n">roi_mask</span> <span class="o">=</span> <span class="n">mask_x</span><span class="p">[</span><span class="n">roi</span><span class="p">]</span>

<span class="n">file_list</span> <span class="o">=</span> <span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="s">*crop*</span><span class="si">{</span><span class="n">scan</span><span class="si">}</span><span class="s">*hdf5</span><span class="sh">'</span><span class="p">))</span>
<span class="n">all_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">file_list</span><span class="p">:</span>
    <span class="n">sub</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">f</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nc">Brain_Data</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">all_data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">apply_mask</span><span class="p">(</span><span class="n">roi_mask</span><span class="p">))</span>
    
<span class="n">roi_mask</span><span class="p">.</span><span class="nf">plot</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sub-13
sub-14
sub-15
sub-12
sub-08
sub-01
sub-06
sub-07
sub-09
sub-10
sub-11
sub-16
sub-05
sub-02
sub-03
sub-04
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_8_1.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Hyperalignment using procrustes transform
# align() input is a list of Brain_Data objects (numpy matrices)
</span>
<span class="c1"># Here, we will exclude the last subject for now and add them later in the tutorial.
</span>
<span class="c1"># align() output is dictionary with keys for a list of...
# 'transformed': transformed data, 
# 'transformation_matrix': corresponding transformation matrices, 
# 'common_model': the common model where all subjects are projected
# 'isc': Intersubject Correlations(ISC) for transformed data
# 'disparity': multivariate distance of the subject to common space
# 'scale' ?
</span>
<span class="n">hyperalign</span> <span class="o">=</span> <span class="nf">align</span><span class="p">(</span><span class="n">all_data</span><span class="p">[:</span><span class="mi">15</span><span class="p">],</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">procrustes</span><span class="sh">'</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">hyperalign</span><span class="p">.</span><span class="nf">keys</span><span class="p">())</span>
</code></pre></div></div>

<p>Let’s plot the aligned voxel time course.
We will see how similar the activity is across participants within a random voxel using ISC.
ISC is the average pairwise correlation between subject voxel time courses.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">voxel_index</span> <span class="o">=</span> <span class="mi">50</span>

<span class="n">voxel_unaligned</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">([</span><span class="n">x</span><span class="p">.</span><span class="n">data</span><span class="p">[:,</span> <span class="n">voxel_index</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">all_data</span><span class="p">]).</span><span class="n">T</span>
<span class="n">voxel_aligned</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">([</span><span class="n">x</span><span class="p">.</span><span class="n">data</span><span class="p">[:,</span> <span class="n">voxel_index</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">hyperalign</span><span class="p">[</span><span class="sh">'</span><span class="s">transformed</span><span class="sh">'</span><span class="p">]]).</span><span class="n">T</span>

<span class="n">f</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">voxel_unaligned</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">2</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">voxel_unaligned</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">navy</span><span class="sh">'</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Unaligned Voxel</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">yaxis</span><span class="p">.</span><span class="nf">set_ticks</span><span class="p">([])</span>

<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">voxel_aligned</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">2</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">voxel_aligned</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">navy</span><span class="sh">'</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Aligned Voxel</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">yaxis</span><span class="p">.</span><span class="nf">set_ticks</span><span class="p">([])</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Voxel Time Course (TRs)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unaligned Voxel ISC: r=</span><span class="si">{</span><span class="nc">Adjacency</span><span class="p">(</span><span class="n">voxel_unaligned</span><span class="p">.</span><span class="nf">corr</span><span class="p">(),</span> <span class="n">matrix_type</span><span class="o">=</span><span class="sh">'</span><span class="s">similarity</span><span class="sh">'</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span><span class="si">:</span><span class="p">.</span><span class="mi">02</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Aligned Voxel ISC: r=</span><span class="si">{</span><span class="nc">Adjacency</span><span class="p">(</span><span class="n">voxel_aligned</span><span class="p">.</span><span class="nf">corr</span><span class="p">(),</span> <span class="n">matrix_type</span><span class="o">=</span><span class="sh">'</span><span class="s">similarity</span><span class="sh">'</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span><span class="si">:</span><span class="p">.</span><span class="mi">02</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Aligned Voxel ISC: r=0.4')
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_11_1.png" alt="png" width="100%" /></p>

<p>The overall time course of both unaligned and aligned voxel activity is very similar.
However, participants have an overall higher degree of similarity after hyperalignment (r=0.4) compared to the unaligned data (r=0.34).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the distribution of overall ISC across all voxels
</span><span class="n">plt</span><span class="p">.</span><span class="nf">hist</span><span class="p">(</span><span class="n">hyperalign</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">].</span><span class="nf">values</span><span class="p">())</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">hyperalign</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">].</span><span class="nf">values</span><span class="p">())),</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Voxel ISC Values</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Hyperalignment ISC</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Mean ISC: </span><span class="si">{</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">hyperalign</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">].</span><span class="nf">values</span><span class="p">()))</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mean ISC: 0.36
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_13_1.png" alt="png" width="100%" /></p>

<p>The overall ISC across voxels is pretty high, mean=0.36.
Note that the mean ISC value is biased b/c it’s not cross-validated so it’s likely slightly inflated.</p>

<p>Let’s plot the transformed data for a random TR and check the impact of hyperalignment on spatial topography.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tr_index</span> <span class="o">=</span> <span class="mi">100</span>

<span class="n">f</span><span class="p">,</span><span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">ncols</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">rot90</span><span class="p">(</span><span class="n">all_data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">tr_index</span><span class="p">].</span><span class="nf">to_nifti</span><span class="p">().</span><span class="n">dataobj</span><span class="p">[</span><span class="mi">30</span><span class="p">:</span><span class="mi">60</span><span class="p">,</span> <span class="mi">10</span><span class="p">:</span><span class="mi">28</span><span class="p">,</span> <span class="mi">37</span><span class="p">]),</span> <span class="n">cbar</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">])</span>
    <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Subject: </span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
    <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">].</span><span class="n">axes</span><span class="p">.</span><span class="nf">get_xaxis</span><span class="p">().</span><span class="nf">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">].</span><span class="n">yaxis</span><span class="p">.</span><span class="nf">set_ticks</span><span class="p">([])</span>
    <span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">rot90</span><span class="p">(</span><span class="n">hyperalign</span><span class="p">[</span><span class="sh">'</span><span class="s">transformed</span><span class="sh">'</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">tr_index</span><span class="p">].</span><span class="nf">to_nifti</span><span class="p">().</span><span class="n">dataobj</span><span class="p">[</span><span class="mi">30</span><span class="p">:</span><span class="mi">60</span><span class="p">,</span> <span class="mi">10</span><span class="p">:</span><span class="mi">28</span><span class="p">,</span> <span class="mi">37</span><span class="p">]),</span> <span class="n">cbar</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">])</span>
    <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">].</span><span class="n">axes</span><span class="p">.</span><span class="nf">get_xaxis</span><span class="p">().</span><span class="nf">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">].</span><span class="n">yaxis</span><span class="p">.</span><span class="nf">set_ticks</span><span class="p">([])</span>

<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Unaligned Voxels</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Aligned Voxels</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_16_0.png" alt="png" width="100%" /></p>

<p>Are the subjects’ patterns more spatially similar after alignment? With alignment, voxels are rearranged to maximize temporal synchrony. The algorithm picks a random subject and then projects every other subject into that space. This is averaged and then iteratively repeated.</p>

<h2 id="shared-response-model">Shared Response Model</h2>
<p>This model allows alignment into a lower dimensional functional space, rather than dimension size of the number of voxels (which can be alot).
This model learns a common latent space and the overall dimensionality is limited to the number of observations.
In this example, there are more voxels (n=2786) in the early visual anatomical mask relative to the number of observed TRs (n=1030). This means the max number of components we can estimate is 1030.
Here, we will align to a 100 dimensional feature space.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># zscore the data and then train model with SRM
</span><span class="n">all_data_z</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="nf">standardize</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">zscore</span><span class="sh">'</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">all_data</span><span class="p">]</span>
<span class="n">srm</span> <span class="o">=</span> <span class="nf">align</span><span class="p">(</span><span class="n">all_data_z</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">deterministic_srm</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_features</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the average time course of a single latent component
# But we cannot directly compare SRMs to the unaligned voxels (unlike the examples above)
</span>
<span class="n">component_index</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">component_aligned</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">([</span><span class="n">x</span><span class="p">[:,</span> <span class="n">component_index</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">srm</span><span class="p">[</span><span class="sh">'</span><span class="s">transformed</span><span class="sh">'</span><span class="p">]]).</span><span class="n">T</span>

<span class="n">f</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">component_aligned</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">2</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">component_aligned</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">navy</span><span class="sh">'</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Aligned Component</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="nf">set_ticks</span><span class="p">([])</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Component Time Course (TRs)</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">a</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Aligned Component ISC: r=</span><span class="si">{</span><span class="nc">Adjacency</span><span class="p">(</span><span class="n">component_aligned</span><span class="p">.</span><span class="nf">corr</span><span class="p">(),</span> <span class="n">matrix_type</span><span class="o">=</span><span class="sh">'</span><span class="s">similarity</span><span class="sh">'</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span><span class="si">:</span><span class="p">.</span><span class="mi">02</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Aligned Component ISC: r=0.45')
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_20_1.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the distribution of overall ISC across all components
</span><span class="n">plt</span><span class="p">.</span><span class="nf">hist</span><span class="p">(</span><span class="n">srm</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">].</span><span class="nf">values</span><span class="p">())</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">axvline</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">srm</span><span class="p">[</span><span class="sh">'</span><span class="s">isc</span><span class="sh">'</span><span class="p">].</span><span class="nf">values</span><span class="p">())),</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Voxel ISC Values</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Shared Response Model ISC</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Shared Response Model ISC')
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_21_1.png" alt="png" width="100%" /></p>

<p>The consequence of this lower dimensional projection is that we can no longer maintain a voxel level representation. So we are unable to generate the same figure depicting how the cortical topographies change.
Instead, we will plot the weights that project each subject’s data into a common latent time course.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot spatial pattern of weights that project subject data into a random latent component (time course)
</span><span class="n">component</span> <span class="o">=</span> <span class="mi">3</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">constrained_layout</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">spec</span> <span class="o">=</span> <span class="n">gridspec</span><span class="p">.</span><span class="nc">GridSpec</span><span class="p">(</span><span class="n">ncols</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">figure</span><span class="o">=</span><span class="n">f</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">a0</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">add_subplot</span><span class="p">(</span><span class="n">spec</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
    <span class="n">a0</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">rot90</span><span class="p">(</span><span class="n">srm</span><span class="p">[</span><span class="sh">'</span><span class="s">transformation_matrix</span><span class="sh">'</span><span class="p">][</span><span class="n">i</span><span class="p">][</span><span class="n">component</span><span class="p">].</span><span class="nf">to_nifti</span><span class="p">().</span><span class="n">dataobj</span><span class="p">[</span><span class="mi">30</span><span class="p">:</span><span class="mi">60</span><span class="p">,</span> <span class="mi">10</span><span class="p">:</span><span class="mi">28</span><span class="p">,</span> <span class="mi">37</span><span class="p">]),</span><span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdBu_r</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">a0</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Subject </span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
    <span class="n">a0</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="nf">set_ticks</span><span class="p">([])</span>
    <span class="n">a0</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="nf">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>    
    
    <span class="n">a1</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">add_subplot</span><span class="p">(</span><span class="n">spec</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">:])</span>
    <span class="n">a1</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">srm</span><span class="p">[</span><span class="sh">'</span><span class="s">transformed</span><span class="sh">'</span><span class="p">][</span><span class="n">i</span><span class="p">][:,</span><span class="n">component</span><span class="p">])</span>
    <span class="n">a1</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="nf">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">a1</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="nf">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">a0</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Spatial Pattern</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
        <span class="n">a1</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Latent Timecourse</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_23_0.png" alt="png" width="100%" /></p>

<h2 id="project-new-subject-data-into-common-space">Project New Subject Data into Common Space</h2>
<p>We can align new subjects into the common model without retraining the entire model.
Here, we individually align subject 16 to the common space learned above using hyperalignment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Align the leftout subject data to common model
</span><span class="n">new_data</span> <span class="o">=</span> <span class="n">all_data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="n">new_data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">()</span>

<span class="n">aligned_sub_hyperalignment</span> <span class="o">=</span> <span class="n">new_data</span><span class="p">.</span><span class="nf">align</span><span class="p">(</span><span class="n">hyperalign</span><span class="p">[</span><span class="sh">'</span><span class="s">common_model</span><span class="sh">'</span><span class="p">],</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">procrustes</span><span class="sh">'</span><span class="p">)</span>

<span class="n">aligned_sub_hyperalignment</span><span class="p">[</span><span class="sh">'</span><span class="s">transformed</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_25_0.png" alt="png" width="100%" /></p>

<p><img src="/assets/img/fa/Functional%20Alignment_25_1.png" alt="png" width="100%" /></p>

<p>The pattern of cortical activation has now changed after projecting this subject into the common space.</p>

<p>We can also project subject 16 into the SRM common space. Note that we also need to zscore the subject’s data before alignment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aligned_sub_srm</span> <span class="o">=</span> <span class="n">new_data</span><span class="p">.</span><span class="nf">standardize</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">zscore</span><span class="sh">'</span><span class="p">).</span><span class="nf">align</span><span class="p">(</span><span class="n">srm</span><span class="p">[</span><span class="sh">'</span><span class="s">common_model</span><span class="sh">'</span><span class="p">],</span> <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">deterministic_srm</span><span class="sh">'</span><span class="p">)</span>

<span class="n">aligned_sub_srm</span><span class="p">[</span><span class="sh">'</span><span class="s">transformation_matrix</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/img/fa/Functional%20Alignment_27_0.png" alt="png" width="100%" /></p>

<p>Because the FA models were trained to maximize ISC, the ISC values are biased and will likely be inflated.
It is important to evaluate how well the model works on independent data.
You can either divide data into training and test datasets, or perform cross-validation.</p>

<p>The idea is to use the LEARNED subject-specific transformation matrices to project NEW independent data from that participant into the common space.</p>

<p>Here we will project Part1 Sherlock data into common space using models trained on Part2 data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load Part1 data and overwrite Part2 data to save RAM
</span><span class="n">scan</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Part1</span><span class="sh">'</span>
<span class="n">roi</span> <span class="o">=</span> <span class="mi">4</span>

<span class="n">roi_mask</span> <span class="o">=</span> <span class="n">mask_x</span><span class="p">[</span><span class="n">roi</span><span class="p">]</span>

<span class="n">file_list</span> <span class="o">=</span> <span class="n">glob</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="sh">'</span><span class="s">fmriprep</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">func</span><span class="sh">'</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="s">*crop*</span><span class="si">{</span><span class="n">scan</span><span class="si">}</span><span class="s">*hdf5</span><span class="sh">'</span><span class="p">))</span>
<span class="n">all_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">file_list</span><span class="p">:</span>
    <span class="n">sub</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">f</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nc">Brain_Data</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">all_data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">apply_mask</span><span class="p">(</span><span class="n">roi_mask</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sub-13
sub-14
sub-15
sub-12
sub-08
sub-01
sub-06
sub-07
sub-09
sub-10
sub-11
sub-16
sub-05
sub-02
sub-03
sub-04
</code></pre></div></div>

<p>Project data into the common space using hyperalignment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create a copy of subject 16's data variable
</span><span class="n">s16_pt1_hyp_transformed</span> <span class="o">=</span> <span class="n">all_data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">copy</span><span class="p">()</span>

<span class="c1"># Use np.dot() to perform a simple inner matrix multiplication to project the data into common space 
# using the subject's transformation matrix learned from Part2
</span><span class="n">s16_pt1_hyp_transformed</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">s16_pt1_hyp_transformed</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">aligned_sub_hyperalignment</span><span class="p">[</span><span class="sh">'</span><span class="s">transformation_matrix</span><span class="sh">'</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>

<span class="n">s16_pt1_hyp_transformed</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nltools.data.brain_data.Brain_Data(data=(946, 2786), Y=0, X=(0, 0), mask=MNI152_T1_2mm_brain_mask.nii.gz)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Repeat for the rest of the participants
</span>
<span class="n">hyperalign_transformed</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">x</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">all_data</span><span class="p">[:</span><span class="mi">15</span><span class="p">]):</span>
    <span class="n">new_x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
    <span class="n">new_x</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">hyperalign</span><span class="p">[</span><span class="sh">'</span><span class="s">transformation_matrix</span><span class="sh">'</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
    <span class="n">hyperalign_transformed</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">new_x</span><span class="p">)</span>
</code></pre></div></div>

<p>This time, project data into the common space using SRM. Remember to zscore the data again.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s16_pt1_srm_transformed</span> <span class="o">=</span> <span class="n">all_data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">copy</span><span class="p">().</span><span class="nf">standardize</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">zscore</span><span class="sh">'</span><span class="p">)</span>

<span class="n">s16_pt1_srm_transformed</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">s16_pt1_srm_transformed</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">aligned_sub_srm</span><span class="p">[</span><span class="sh">'</span><span class="s">transformation_matrix</span><span class="sh">'</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>

<span class="n">s16_pt1_srm_transformed</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(946, 100)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Repeat for the rest of the participants
</span>
<span class="n">srm_transformed</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">x</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">all_data</span><span class="p">[:</span><span class="mi">15</span><span class="p">]):</span>
    <span class="n">srm_transformed</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">standardize</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">zscore</span><span class="sh">'</span><span class="p">).</span><span class="n">data</span><span class="p">,</span> <span class="n">srm</span><span class="p">[</span><span class="sh">'</span><span class="s">transformation_matrix</span><span class="sh">'</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">T</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="naturalistic-data-analysis" /><category term="neuroimaging" /><category term="psychology" /><category term="analysis-methods" /><summary type="html"><![CDATA[tutorial for functional alignment]]></summary></entry><entry><title type="html">Functional Alignment</title><link href="https://naeunoh.github.io/blog/2022/functional-alignment/" rel="alternate" type="text/html" title="Functional Alignment" /><published>2022-07-16T15:09:00+00:00</published><updated>2022-07-16T15:09:00+00:00</updated><id>https://naeunoh.github.io/blog/2022/functional-alignment</id><content type="html" xml:base="https://naeunoh.github.io/blog/2022/functional-alignment/"><![CDATA[<p>Generally, neuroimaging studies implicitly assume that each person’s brain processes information in the same way as other people’s brains. However, it is a known fact that there is a wide variation in individual neuroanatomy.</p>

<p>Thus, to identify the common brain processes, we must normalize each participant into a common stereotactic space. This would minimize the individual variation that we are not interested in.</p>

<p>One way is applying a small amount of Gaussian smoothing to mitigate small misalignments and increase voxel signal to noise ratios (SNR). This method is effective when performing mass univariate testing but problematic when using multivariate techniques that assume strong alignment of features (e.g. voxels) across participants.</p>

<p>Another newly developing approach lead by Jim Haxby and Peter Ramadge projects subjects into common space based on how voxels respond to stimuli or are connected to other voxels. This is called <strong>functional alignment</strong> or <strong>hyperalignment</strong>.</p>

<p>The basic idea behind hyperalignment is as follows.</p>

<p>First, the cortical patterns are treated as vectors corresponding to locations in a high dimensional space, where each axis reflects a measurement of that pattern (e.g. voxel activity). Rather than treating cortical functions in a 1D (average roi activity), 2D (cortical sheet), or 3D physical space, HA models information as being embedded in an n-D space, where n reflects the number of measurements (e.g. voxels). Simply put, a cortical pattern of a timepoint t (e.g. conditions, stimuli, timepoints) is vectorized or flattened into a vector and then expressed as a location point/position in the n-dimensional space where each axis is a voxel. 
Then, vector representations of individual cortical patterns can be transformed into a common dimensional space that is shared across participants (Haxby et al., 2000). Each cortical pattern has a unique transformation matrix (\(voxel x dimension\)).</p>

<p><img src="/assets/img/fa/elife-56601-fig1-v1.jpg" alt="hyperalignment" width="100%" /></p>

<p><strong>Note:</strong> <a href="https://youtu.be/fNk_zzaMoSs">3blue1brown video on vectors</a> might help understand the general concept of vectors in space.</p>

<p>There are many different models of functional alignment. The basic framework can be applied to cortical patterns of voxel responses (<em>response-based hyperalignment</em>, vector=timepoint x voxel) or functional connectivity (<em>connectivity-based hyperalignment</em>, vector=target x connected node) or latent feature space (<em>shared response model</em>, joint-SVD).
Overall, the lower dimensional projections (onto common dimensional space) remove redundant axes in the high dimensional space and can effectively denoise the signal, which also improves classification accuracy of subsequent analysis. It has been shown that all the different approaches can dramatically improve between subject classification accuracy in ventral temporal cortex.</p>

<p>(For detailed information, watch the <a href="https://youtu.be/QX7sNaLyxdo">video by Dr. James Haxby, PhD</a> from the 2018 MIND Computational Summer School. I will add more on this)</p>]]></content><author><name></name></author><category term="naturalistic-data-analysis" /><category term="neuroimaging" /><category term="psychology" /><category term="analysis-methods" /><summary type="html"><![CDATA[minimize individual variation]]></summary></entry><entry><title type="html">Neuroimaging - Naturalistic Data Analysis</title><link href="https://naeunoh.github.io/blog/2022/naturalistic-intro/" rel="alternate" type="text/html" title="Neuroimaging - Naturalistic Data Analysis" /><published>2022-07-15T15:09:00+00:00</published><updated>2022-07-15T15:09:00+00:00</updated><id>https://naeunoh.github.io/blog/2022/naturalistic-intro</id><content type="html" xml:base="https://naeunoh.github.io/blog/2022/naturalistic-intro/"><![CDATA[<p>The field of psychology and neuroscience is very close to each other. Both fields essentially want to understand the processes of psychological phenomena.
Why do we study the brain processes in neuroscience with the goal of understanding psychological processes?</p>

<p>Overall, neuroimaging tasks used to investigate psychological processes can be categorized into classic controlled tasks and naturalistic tasks. 
For many years, Classic controlled tasks have been used to study the visual system, decision-making, etc.
However, it has recently been noticed that for relatively abstract and endogenous process, such as affect or social cognition, controlled tasks with very specific predefined stimuli and controlled experimental environment may oversimplify the complex underlying processes that is actually occuring.</p>

<p>I want to note that controlled tasks have effectively identified certain “complex” processes and they also have many advantages compared to naturalistic tasks.</p>

<p>For the upcoming posts, I will be reviewing the various analysis methods of naturalistic tasks that reflect relatively abstract and endogenous psychological processes, such as affect and social cognition.
The tutorials are based on <a href="https://naturalistic-data.org">the Naturalistic Data Analysis tutorial</a> built by multiple researchers in the social and affective neuroscience field.
I have reorganized and re-explained the tutorials to make it more comprehensive.</p>

<p>The methods described correspond to the questions asked in the various stages of naturalistic data analysis. Note that this only suggests that these methods can be used in these steps of naturalistic data analysis and their usage is not limited to the field of naturalistic tasks. In fact, they are commonly used in other types of tasks including block or event design controlled tasks, multivariate analyses, and Bayesian models.</p>

<blockquote>
  <p><strong>Research Questions &amp; Corresponding Methods for Naturalistic Tasks</strong></p>

  <ol>
    <li>How do we build models using naturalistic designs?
      <ol>
        <li>Indirectly model by capturing “reliable” neural responses among subjects
          <ul>
            <li>Minimize individual variations with Functional Alignment</li>
            <li>Predict one’s brain activity from another : Intersubject Correlation Intersubject Functional Connectivity</li>
            <li>Individual variations in brain activity : Intersubject Representational Similarity Analysis (IS-RSA)</li>
            <li>Dynamic changes in ISC : Intersubject Phase Synchrony</li>
          </ul>
        </li>
        <li>Explicitly annotate features of the model
          <ul>
            <li>Define stimuli using Automated Annotations</li>
            <li>Define stimuli using Natural Language Processing</li>
          </ul>
        </li>
      </ol>
    </li>
    <li>How does the brain segment information from experiences?
      <ul>
        <li>Event Segmentation (Hidden Markov Model, Greedy State Boundary Search)</li>
      </ul>
    </li>
    <li>How do networks of brain regions dynamically reconfigure as thoughts and experiences change over time?
      <ul>
        <li>Hidden Semi-Markov Model</li>
      </ul>
    </li>
    <li>How do networks of brain regions (FC) interact in higher order patterns?
      <ul>
        <li>Dynamic Connectivity</li>
      </ul>
    </li>
    <li>How do we visualize complex high-dimensional data?
      <ul>
        <li>Embedding with Hypertools</li>
      </ul>
    </li>
  </ol>
</blockquote>

<p><strong>Naturalistic Datasets</strong></p>

<p>Here are some open-source fMRI datasets on naturalistic tasks.</p>

<p><a href="https://www.humanconnectome.org/study/hcp-young-adult">Human Connectome Project 7T movie-watching data</a> (n = 184, four 15-minute movie-watching runs, many cognitive, affective, and clinical measures)</p>

<p><a href="http://fcon_1000.projects.nitrc.org/indi/cmi_healthy_brain_network/index.html">Child Mind Institute Health Brain Network project</a> (n = 2,500+ and growing, two movie-watching runs [one 10-minute and one 3.5-minute], many cognitive, affective, and clinical measures)</p>

<p><a href="https://openneuro.org/datasets/ds002345/versions/1.0.1">Narratives: fMRI data for evaluating models of naturalistic language comprehension</a> (n=315, auditory listening of naturalistic spoken stories [~3 to ~56 minutes], includes anatomical data)</p>

<p><a href="https://openneuro.org/datasets/ds001338/versions/1.0.0">Paranoia: fMRI data for listening to audio narratives</a> (n=22, auditory listening of original audio narrative designed to elicit individual variation of suspicion/paranoia)</p>

<p><a href="http://fcon_1000.projects.nitrc.org/indi/cmi_healthy_brain_network/">Child Mind Institute: Healthy Brain Network</a></p>

<p><a href="https://camcan-archive.mrc-cbu.cam.ac.uk/dataaccess/">Cam-CAN (Cambridge Centre for Ageing Neuroscience) dataset inventory</a> (n=650, watching Hitchcock movie ‘Bang you’re dead’, many cognitive task datasets)</p>

<p>There are also behavioral (only) datasets of naturalistic tasks.</p>

<p><a href="https://github.com/StanfordSocialNeuroscienceLab/SEND">Standford Emotional Narratives Dataset</a> (n=193, videos of people recounting important and emotional life stories, and valence ratings watching the videos)</p>]]></content><author><name></name></author><category term="neuroimaging" /><category term="neuroimaging" /><category term="psychology" /><category term="analysis-methods" /><summary type="html"><![CDATA[intro to naturalistic methods]]></summary></entry></feed>